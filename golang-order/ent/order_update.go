// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"golang-order/ent/order"
	"golang-order/ent/orderitem"
	"golang-order/ent/predicate"
	"golang-order/ent/refund"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrderUpdate) SetUpdatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetCustomerID sets the "customer_id" field.
func (ou *OrderUpdate) SetCustomerID(u uuid.UUID) *OrderUpdate {
	ou.mutation.SetCustomerID(u)
	return ou
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCustomerID(u *uuid.UUID) *OrderUpdate {
	if u != nil {
		ou.SetCustomerID(*u)
	}
	return ou
}

// SetStatus sets the "status" field.
func (ou *OrderUpdate) SetStatus(o order.Status) *OrderUpdate {
	ou.mutation.SetStatus(o)
	return ou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableStatus(o *order.Status) *OrderUpdate {
	if o != nil {
		ou.SetStatus(*o)
	}
	return ou
}

// SetSubtotal sets the "subtotal" field.
func (ou *OrderUpdate) SetSubtotal(f float64) *OrderUpdate {
	ou.mutation.ResetSubtotal()
	ou.mutation.SetSubtotal(f)
	return ou
}

// SetNillableSubtotal sets the "subtotal" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableSubtotal(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetSubtotal(*f)
	}
	return ou
}

// AddSubtotal adds f to the "subtotal" field.
func (ou *OrderUpdate) AddSubtotal(f float64) *OrderUpdate {
	ou.mutation.AddSubtotal(f)
	return ou
}

// SetTax sets the "tax" field.
func (ou *OrderUpdate) SetTax(f float64) *OrderUpdate {
	ou.mutation.ResetTax()
	ou.mutation.SetTax(f)
	return ou
}

// SetNillableTax sets the "tax" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableTax(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetTax(*f)
	}
	return ou
}

// AddTax adds f to the "tax" field.
func (ou *OrderUpdate) AddTax(f float64) *OrderUpdate {
	ou.mutation.AddTax(f)
	return ou
}

// SetShippingCost sets the "shipping_cost" field.
func (ou *OrderUpdate) SetShippingCost(f float64) *OrderUpdate {
	ou.mutation.ResetShippingCost()
	ou.mutation.SetShippingCost(f)
	return ou
}

// SetNillableShippingCost sets the "shipping_cost" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShippingCost(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetShippingCost(*f)
	}
	return ou
}

// AddShippingCost adds f to the "shipping_cost" field.
func (ou *OrderUpdate) AddShippingCost(f float64) *OrderUpdate {
	ou.mutation.AddShippingCost(f)
	return ou
}

// SetTotal sets the "total" field.
func (ou *OrderUpdate) SetTotal(f float64) *OrderUpdate {
	ou.mutation.ResetTotal()
	ou.mutation.SetTotal(f)
	return ou
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableTotal(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetTotal(*f)
	}
	return ou
}

// AddTotal adds f to the "total" field.
func (ou *OrderUpdate) AddTotal(f float64) *OrderUpdate {
	ou.mutation.AddTotal(f)
	return ou
}

// SetShippingAddress sets the "shipping_address" field.
func (ou *OrderUpdate) SetShippingAddress(s string) *OrderUpdate {
	ou.mutation.SetShippingAddress(s)
	return ou
}

// SetNillableShippingAddress sets the "shipping_address" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShippingAddress(s *string) *OrderUpdate {
	if s != nil {
		ou.SetShippingAddress(*s)
	}
	return ou
}

// SetBillingAddress sets the "billing_address" field.
func (ou *OrderUpdate) SetBillingAddress(s string) *OrderUpdate {
	ou.mutation.SetBillingAddress(s)
	return ou
}

// SetNillableBillingAddress sets the "billing_address" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableBillingAddress(s *string) *OrderUpdate {
	if s != nil {
		ou.SetBillingAddress(*s)
	}
	return ou
}

// SetPaymentIntentID sets the "payment_intent_id" field.
func (ou *OrderUpdate) SetPaymentIntentID(u uuid.UUID) *OrderUpdate {
	ou.mutation.SetPaymentIntentID(u)
	return ou
}

// SetNillablePaymentIntentID sets the "payment_intent_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePaymentIntentID(u *uuid.UUID) *OrderUpdate {
	if u != nil {
		ou.SetPaymentIntentID(*u)
	}
	return ou
}

// ClearPaymentIntentID clears the value of the "payment_intent_id" field.
func (ou *OrderUpdate) ClearPaymentIntentID() *OrderUpdate {
	ou.mutation.ClearPaymentIntentID()
	return ou
}

// AddItemIDs adds the "items" edge to the OrderItem entity by IDs.
func (ou *OrderUpdate) AddItemIDs(ids ...uuid.UUID) *OrderUpdate {
	ou.mutation.AddItemIDs(ids...)
	return ou
}

// AddItems adds the "items" edges to the OrderItem entity.
func (ou *OrderUpdate) AddItems(o ...*OrderItem) *OrderUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddItemIDs(ids...)
}

// AddRefundIDs adds the "refunds" edge to the Refund entity by IDs.
func (ou *OrderUpdate) AddRefundIDs(ids ...uuid.UUID) *OrderUpdate {
	ou.mutation.AddRefundIDs(ids...)
	return ou
}

// AddRefunds adds the "refunds" edges to the Refund entity.
func (ou *OrderUpdate) AddRefunds(r ...*Refund) *OrderUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ou.AddRefundIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearItems clears all "items" edges to the OrderItem entity.
func (ou *OrderUpdate) ClearItems() *OrderUpdate {
	ou.mutation.ClearItems()
	return ou
}

// RemoveItemIDs removes the "items" edge to OrderItem entities by IDs.
func (ou *OrderUpdate) RemoveItemIDs(ids ...uuid.UUID) *OrderUpdate {
	ou.mutation.RemoveItemIDs(ids...)
	return ou
}

// RemoveItems removes "items" edges to OrderItem entities.
func (ou *OrderUpdate) RemoveItems(o ...*OrderItem) *OrderUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveItemIDs(ids...)
}

// ClearRefunds clears all "refunds" edges to the Refund entity.
func (ou *OrderUpdate) ClearRefunds() *OrderUpdate {
	ou.mutation.ClearRefunds()
	return ou
}

// RemoveRefundIDs removes the "refunds" edge to Refund entities by IDs.
func (ou *OrderUpdate) RemoveRefundIDs(ids ...uuid.UUID) *OrderUpdate {
	ou.mutation.RemoveRefundIDs(ids...)
	return ou
}

// RemoveRefunds removes "refunds" edges to Refund entities.
func (ou *OrderUpdate) RemoveRefunds(r ...*Refund) *OrderUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ou.RemoveRefundIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrderUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrderUpdate) check() error {
	if v, ok := ou.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Subtotal(); ok {
		if err := order.SubtotalValidator(v); err != nil {
			return &ValidationError{Name: "subtotal", err: fmt.Errorf(`ent: validator failed for field "Order.subtotal": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Tax(); ok {
		if err := order.TaxValidator(v); err != nil {
			return &ValidationError{Name: "tax", err: fmt.Errorf(`ent: validator failed for field "Order.tax": %w`, err)}
		}
	}
	if v, ok := ou.mutation.ShippingCost(); ok {
		if err := order.ShippingCostValidator(v); err != nil {
			return &ValidationError{Name: "shipping_cost", err: fmt.Errorf(`ent: validator failed for field "Order.shipping_cost": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Total(); ok {
		if err := order.TotalValidator(v); err != nil {
			return &ValidationError{Name: "total", err: fmt.Errorf(`ent: validator failed for field "Order.total": %w`, err)}
		}
	}
	return nil
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.CustomerID(); ok {
		_spec.SetField(order.FieldCustomerID, field.TypeUUID, value)
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ou.mutation.Subtotal(); ok {
		_spec.SetField(order.FieldSubtotal, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedSubtotal(); ok {
		_spec.AddField(order.FieldSubtotal, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.Tax(); ok {
		_spec.SetField(order.FieldTax, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedTax(); ok {
		_spec.AddField(order.FieldTax, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.ShippingCost(); ok {
		_spec.SetField(order.FieldShippingCost, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedShippingCost(); ok {
		_spec.AddField(order.FieldShippingCost, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.Total(); ok {
		_spec.SetField(order.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedTotal(); ok {
		_spec.AddField(order.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.ShippingAddress(); ok {
		_spec.SetField(order.FieldShippingAddress, field.TypeString, value)
	}
	if value, ok := ou.mutation.BillingAddress(); ok {
		_spec.SetField(order.FieldBillingAddress, field.TypeString, value)
	}
	if value, ok := ou.mutation.PaymentIntentID(); ok {
		_spec.SetField(order.FieldPaymentIntentID, field.TypeUUID, value)
	}
	if ou.mutation.PaymentIntentIDCleared() {
		_spec.ClearField(order.FieldPaymentIntentID, field.TypeUUID)
	}
	if ou.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedItemsIDs(); len(nodes) > 0 && !ou.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.RefundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.RefundsTable,
			Columns: []string{order.RefundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(refund.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedRefundsIDs(); len(nodes) > 0 && !ou.mutation.RefundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.RefundsTable,
			Columns: []string{order.RefundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(refund.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RefundsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.RefundsTable,
			Columns: []string{order.RefundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(refund.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrderUpdateOne) SetUpdatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetCustomerID sets the "customer_id" field.
func (ouo *OrderUpdateOne) SetCustomerID(u uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetCustomerID(u)
	return ouo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCustomerID(u *uuid.UUID) *OrderUpdateOne {
	if u != nil {
		ouo.SetCustomerID(*u)
	}
	return ouo
}

// SetStatus sets the "status" field.
func (ouo *OrderUpdateOne) SetStatus(o order.Status) *OrderUpdateOne {
	ouo.mutation.SetStatus(o)
	return ouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableStatus(o *order.Status) *OrderUpdateOne {
	if o != nil {
		ouo.SetStatus(*o)
	}
	return ouo
}

// SetSubtotal sets the "subtotal" field.
func (ouo *OrderUpdateOne) SetSubtotal(f float64) *OrderUpdateOne {
	ouo.mutation.ResetSubtotal()
	ouo.mutation.SetSubtotal(f)
	return ouo
}

// SetNillableSubtotal sets the "subtotal" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableSubtotal(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetSubtotal(*f)
	}
	return ouo
}

// AddSubtotal adds f to the "subtotal" field.
func (ouo *OrderUpdateOne) AddSubtotal(f float64) *OrderUpdateOne {
	ouo.mutation.AddSubtotal(f)
	return ouo
}

// SetTax sets the "tax" field.
func (ouo *OrderUpdateOne) SetTax(f float64) *OrderUpdateOne {
	ouo.mutation.ResetTax()
	ouo.mutation.SetTax(f)
	return ouo
}

// SetNillableTax sets the "tax" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableTax(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetTax(*f)
	}
	return ouo
}

// AddTax adds f to the "tax" field.
func (ouo *OrderUpdateOne) AddTax(f float64) *OrderUpdateOne {
	ouo.mutation.AddTax(f)
	return ouo
}

// SetShippingCost sets the "shipping_cost" field.
func (ouo *OrderUpdateOne) SetShippingCost(f float64) *OrderUpdateOne {
	ouo.mutation.ResetShippingCost()
	ouo.mutation.SetShippingCost(f)
	return ouo
}

// SetNillableShippingCost sets the "shipping_cost" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShippingCost(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetShippingCost(*f)
	}
	return ouo
}

// AddShippingCost adds f to the "shipping_cost" field.
func (ouo *OrderUpdateOne) AddShippingCost(f float64) *OrderUpdateOne {
	ouo.mutation.AddShippingCost(f)
	return ouo
}

// SetTotal sets the "total" field.
func (ouo *OrderUpdateOne) SetTotal(f float64) *OrderUpdateOne {
	ouo.mutation.ResetTotal()
	ouo.mutation.SetTotal(f)
	return ouo
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableTotal(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetTotal(*f)
	}
	return ouo
}

// AddTotal adds f to the "total" field.
func (ouo *OrderUpdateOne) AddTotal(f float64) *OrderUpdateOne {
	ouo.mutation.AddTotal(f)
	return ouo
}

// SetShippingAddress sets the "shipping_address" field.
func (ouo *OrderUpdateOne) SetShippingAddress(s string) *OrderUpdateOne {
	ouo.mutation.SetShippingAddress(s)
	return ouo
}

// SetNillableShippingAddress sets the "shipping_address" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShippingAddress(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetShippingAddress(*s)
	}
	return ouo
}

// SetBillingAddress sets the "billing_address" field.
func (ouo *OrderUpdateOne) SetBillingAddress(s string) *OrderUpdateOne {
	ouo.mutation.SetBillingAddress(s)
	return ouo
}

// SetNillableBillingAddress sets the "billing_address" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableBillingAddress(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetBillingAddress(*s)
	}
	return ouo
}

// SetPaymentIntentID sets the "payment_intent_id" field.
func (ouo *OrderUpdateOne) SetPaymentIntentID(u uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetPaymentIntentID(u)
	return ouo
}

// SetNillablePaymentIntentID sets the "payment_intent_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePaymentIntentID(u *uuid.UUID) *OrderUpdateOne {
	if u != nil {
		ouo.SetPaymentIntentID(*u)
	}
	return ouo
}

// ClearPaymentIntentID clears the value of the "payment_intent_id" field.
func (ouo *OrderUpdateOne) ClearPaymentIntentID() *OrderUpdateOne {
	ouo.mutation.ClearPaymentIntentID()
	return ouo
}

// AddItemIDs adds the "items" edge to the OrderItem entity by IDs.
func (ouo *OrderUpdateOne) AddItemIDs(ids ...uuid.UUID) *OrderUpdateOne {
	ouo.mutation.AddItemIDs(ids...)
	return ouo
}

// AddItems adds the "items" edges to the OrderItem entity.
func (ouo *OrderUpdateOne) AddItems(o ...*OrderItem) *OrderUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddItemIDs(ids...)
}

// AddRefundIDs adds the "refunds" edge to the Refund entity by IDs.
func (ouo *OrderUpdateOne) AddRefundIDs(ids ...uuid.UUID) *OrderUpdateOne {
	ouo.mutation.AddRefundIDs(ids...)
	return ouo
}

// AddRefunds adds the "refunds" edges to the Refund entity.
func (ouo *OrderUpdateOne) AddRefunds(r ...*Refund) *OrderUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ouo.AddRefundIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearItems clears all "items" edges to the OrderItem entity.
func (ouo *OrderUpdateOne) ClearItems() *OrderUpdateOne {
	ouo.mutation.ClearItems()
	return ouo
}

// RemoveItemIDs removes the "items" edge to OrderItem entities by IDs.
func (ouo *OrderUpdateOne) RemoveItemIDs(ids ...uuid.UUID) *OrderUpdateOne {
	ouo.mutation.RemoveItemIDs(ids...)
	return ouo
}

// RemoveItems removes "items" edges to OrderItem entities.
func (ouo *OrderUpdateOne) RemoveItems(o ...*OrderItem) *OrderUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveItemIDs(ids...)
}

// ClearRefunds clears all "refunds" edges to the Refund entity.
func (ouo *OrderUpdateOne) ClearRefunds() *OrderUpdateOne {
	ouo.mutation.ClearRefunds()
	return ouo
}

// RemoveRefundIDs removes the "refunds" edge to Refund entities by IDs.
func (ouo *OrderUpdateOne) RemoveRefundIDs(ids ...uuid.UUID) *OrderUpdateOne {
	ouo.mutation.RemoveRefundIDs(ids...)
	return ouo
}

// RemoveRefunds removes "refunds" edges to Refund entities.
func (ouo *OrderUpdateOne) RemoveRefunds(r ...*Refund) *OrderUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ouo.RemoveRefundIDs(ids...)
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrderUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrderUpdateOne) check() error {
	if v, ok := ouo.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Subtotal(); ok {
		if err := order.SubtotalValidator(v); err != nil {
			return &ValidationError{Name: "subtotal", err: fmt.Errorf(`ent: validator failed for field "Order.subtotal": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Tax(); ok {
		if err := order.TaxValidator(v); err != nil {
			return &ValidationError{Name: "tax", err: fmt.Errorf(`ent: validator failed for field "Order.tax": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.ShippingCost(); ok {
		if err := order.ShippingCostValidator(v); err != nil {
			return &ValidationError{Name: "shipping_cost", err: fmt.Errorf(`ent: validator failed for field "Order.shipping_cost": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Total(); ok {
		if err := order.TotalValidator(v); err != nil {
			return &ValidationError{Name: "total", err: fmt.Errorf(`ent: validator failed for field "Order.total": %w`, err)}
		}
	}
	return nil
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.CustomerID(); ok {
		_spec.SetField(order.FieldCustomerID, field.TypeUUID, value)
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ouo.mutation.Subtotal(); ok {
		_spec.SetField(order.FieldSubtotal, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedSubtotal(); ok {
		_spec.AddField(order.FieldSubtotal, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.Tax(); ok {
		_spec.SetField(order.FieldTax, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedTax(); ok {
		_spec.AddField(order.FieldTax, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.ShippingCost(); ok {
		_spec.SetField(order.FieldShippingCost, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedShippingCost(); ok {
		_spec.AddField(order.FieldShippingCost, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.Total(); ok {
		_spec.SetField(order.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedTotal(); ok {
		_spec.AddField(order.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.ShippingAddress(); ok {
		_spec.SetField(order.FieldShippingAddress, field.TypeString, value)
	}
	if value, ok := ouo.mutation.BillingAddress(); ok {
		_spec.SetField(order.FieldBillingAddress, field.TypeString, value)
	}
	if value, ok := ouo.mutation.PaymentIntentID(); ok {
		_spec.SetField(order.FieldPaymentIntentID, field.TypeUUID, value)
	}
	if ouo.mutation.PaymentIntentIDCleared() {
		_spec.ClearField(order.FieldPaymentIntentID, field.TypeUUID)
	}
	if ouo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedItemsIDs(); len(nodes) > 0 && !ouo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.RefundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.RefundsTable,
			Columns: []string{order.RefundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(refund.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedRefundsIDs(); len(nodes) > 0 && !ouo.mutation.RefundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.RefundsTable,
			Columns: []string{order.RefundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(refund.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RefundsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.RefundsTable,
			Columns: []string{order.RefundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(refund.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
