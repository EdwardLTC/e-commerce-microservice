// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// OrdersColumns holds the columns for the "orders" table.
	OrdersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "customer_id", Type: field.TypeUUID},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"draft", "pending_payment", "payment_received", "preparing", "shipped", "delivered", "cancelled"}, Default: "draft"},
		{Name: "subtotal", Type: field.TypeFloat64, Default: 0},
		{Name: "tax", Type: field.TypeFloat64, Default: 0},
		{Name: "shipping_cost", Type: field.TypeFloat64, Default: 0},
		{Name: "total", Type: field.TypeFloat64, Default: 0},
		{Name: "shipping_address", Type: field.TypeString, Size: 2147483647},
		{Name: "billing_address", Type: field.TypeString, Size: 2147483647},
		{Name: "payment_intent_id", Type: field.TypeUUID, Nullable: true},
	}
	// OrdersTable holds the schema information for the "orders" table.
	OrdersTable = &schema.Table{
		Name:       "orders",
		Columns:    OrdersColumns,
		PrimaryKey: []*schema.Column{OrdersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "order_customer_id",
				Unique:  false,
				Columns: []*schema.Column{OrdersColumns[3]},
			},
			{
				Name:    "order_status",
				Unique:  false,
				Columns: []*schema.Column{OrdersColumns[4]},
			},
			{
				Name:    "order_payment_intent_id",
				Unique:  false,
				Columns: []*schema.Column{OrdersColumns[11]},
			},
		},
	}
	// OrderItemsColumns holds the columns for the "order_items" table.
	OrderItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "product_id", Type: field.TypeUUID},
		{Name: "variant_id", Type: field.TypeUUID},
		{Name: "product_name", Type: field.TypeString},
		{Name: "variant_description", Type: field.TypeString, Nullable: true},
		{Name: "unit_price", Type: field.TypeFloat64},
		{Name: "quantity", Type: field.TypeInt},
		{Name: "total_price", Type: field.TypeFloat64},
		{Name: "image_url", Type: field.TypeString, Nullable: true},
		{Name: "order_items", Type: field.TypeUUID},
		{Name: "refund_items", Type: field.TypeUUID, Nullable: true},
	}
	// OrderItemsTable holds the schema information for the "order_items" table.
	OrderItemsTable = &schema.Table{
		Name:       "order_items",
		Columns:    OrderItemsColumns,
		PrimaryKey: []*schema.Column{OrderItemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "order_items_orders_items",
				Columns:    []*schema.Column{OrderItemsColumns[11]},
				RefColumns: []*schema.Column{OrdersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "order_items_refunds_items",
				Columns:    []*schema.Column{OrderItemsColumns[12]},
				RefColumns: []*schema.Column{RefundsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RefundsColumns holds the columns for the "refunds" table.
	RefundsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"requested", "approved", "rejected", "processed"}},
		{Name: "amount", Type: field.TypeFloat64},
		{Name: "reason", Type: field.TypeString, Size: 2147483647},
		{Name: "payment_refund_id", Type: field.TypeUUID, Nullable: true},
		{Name: "order_refunds", Type: field.TypeUUID, Nullable: true},
	}
	// RefundsTable holds the schema information for the "refunds" table.
	RefundsTable = &schema.Table{
		Name:       "refunds",
		Columns:    RefundsColumns,
		PrimaryKey: []*schema.Column{RefundsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "refunds_orders_refunds",
				Columns:    []*schema.Column{RefundsColumns[7]},
				RefColumns: []*schema.Column{OrdersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		OrdersTable,
		OrderItemsTable,
		RefundsTable,
	}
)

func init() {
	OrderItemsTable.ForeignKeys[0].RefTable = OrdersTable
	OrderItemsTable.ForeignKeys[1].RefTable = RefundsTable
	RefundsTable.ForeignKeys[0].RefTable = OrdersTable
}
