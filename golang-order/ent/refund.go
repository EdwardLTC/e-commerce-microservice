// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"golang-order/ent/order"
	"golang-order/ent/refund"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Refund is the model entity for the Refund schema.
type Refund struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Status holds the value of the "status" field.
	Status refund.Status `json:"status,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// Reason holds the value of the "reason" field.
	Reason string `json:"reason,omitempty"`
	// PaymentRefundID holds the value of the "payment_refund_id" field.
	PaymentRefundID uuid.UUID `json:"payment_refund_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RefundQuery when eager-loading is set.
	Edges         RefundEdges `json:"edges"`
	order_refunds *uuid.UUID
	selectValues  sql.SelectValues
}

// RefundEdges holds the relations/edges for other nodes in the graph.
type RefundEdges struct {
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// Items holds the value of the items edge.
	Items []*OrderItem `json:"items,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RefundEdges) OrderOrErr() (*Order, error) {
	if e.Order != nil {
		return e.Order, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: order.Label}
	}
	return nil, &NotLoadedError{edge: "order"}
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e RefundEdges) ItemsOrErr() ([]*OrderItem, error) {
	if e.loadedTypes[1] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Refund) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case refund.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case refund.FieldStatus, refund.FieldReason:
			values[i] = new(sql.NullString)
		case refund.FieldCreatedAt, refund.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case refund.FieldID, refund.FieldPaymentRefundID:
			values[i] = new(uuid.UUID)
		case refund.ForeignKeys[0]: // order_refunds
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Refund fields.
func (r *Refund) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case refund.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case refund.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case refund.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case refund.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				r.Status = refund.Status(value.String)
			}
		case refund.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				r.Amount = value.Float64
			}
		case refund.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				r.Reason = value.String
			}
		case refund.FieldPaymentRefundID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field payment_refund_id", values[i])
			} else if value != nil {
				r.PaymentRefundID = *value
			}
		case refund.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field order_refunds", values[i])
			} else if value.Valid {
				r.order_refunds = new(uuid.UUID)
				*r.order_refunds = *value.S.(*uuid.UUID)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Refund.
// This includes values selected through modifiers, order, etc.
func (r *Refund) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryOrder queries the "order" edge of the Refund entity.
func (r *Refund) QueryOrder() *OrderQuery {
	return NewRefundClient(r.config).QueryOrder(r)
}

// QueryItems queries the "items" edge of the Refund entity.
func (r *Refund) QueryItems() *OrderItemQuery {
	return NewRefundClient(r.config).QueryItems(r)
}

// Update returns a builder for updating this Refund.
// Note that you need to call Refund.Unwrap() before calling this method if this Refund
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Refund) Update() *RefundUpdateOne {
	return NewRefundClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Refund entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Refund) Unwrap() *Refund {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Refund is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Refund) String() string {
	var builder strings.Builder
	builder.WriteString("Refund(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", r.Status))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", r.Amount))
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(r.Reason)
	builder.WriteString(", ")
	builder.WriteString("payment_refund_id=")
	builder.WriteString(fmt.Sprintf("%v", r.PaymentRefundID))
	builder.WriteByte(')')
	return builder.String()
}

// Refunds is a parsable slice of Refund.
type Refunds []*Refund
