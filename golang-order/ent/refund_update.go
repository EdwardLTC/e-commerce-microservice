// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"golang-order/ent/order"
	"golang-order/ent/orderitem"
	"golang-order/ent/predicate"
	"golang-order/ent/refund"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// RefundUpdate is the builder for updating Refund entities.
type RefundUpdate struct {
	config
	hooks    []Hook
	mutation *RefundMutation
}

// Where appends a list predicates to the RefundUpdate builder.
func (ru *RefundUpdate) Where(ps ...predicate.Refund) *RefundUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RefundUpdate) SetUpdatedAt(t time.Time) *RefundUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetStatus sets the "status" field.
func (ru *RefundUpdate) SetStatus(r refund.Status) *RefundUpdate {
	ru.mutation.SetStatus(r)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *RefundUpdate) SetNillableStatus(r *refund.Status) *RefundUpdate {
	if r != nil {
		ru.SetStatus(*r)
	}
	return ru
}

// SetAmount sets the "amount" field.
func (ru *RefundUpdate) SetAmount(f float64) *RefundUpdate {
	ru.mutation.ResetAmount()
	ru.mutation.SetAmount(f)
	return ru
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ru *RefundUpdate) SetNillableAmount(f *float64) *RefundUpdate {
	if f != nil {
		ru.SetAmount(*f)
	}
	return ru
}

// AddAmount adds f to the "amount" field.
func (ru *RefundUpdate) AddAmount(f float64) *RefundUpdate {
	ru.mutation.AddAmount(f)
	return ru
}

// SetReason sets the "reason" field.
func (ru *RefundUpdate) SetReason(s string) *RefundUpdate {
	ru.mutation.SetReason(s)
	return ru
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (ru *RefundUpdate) SetNillableReason(s *string) *RefundUpdate {
	if s != nil {
		ru.SetReason(*s)
	}
	return ru
}

// SetPaymentRefundID sets the "payment_refund_id" field.
func (ru *RefundUpdate) SetPaymentRefundID(u uuid.UUID) *RefundUpdate {
	ru.mutation.SetPaymentRefundID(u)
	return ru
}

// SetNillablePaymentRefundID sets the "payment_refund_id" field if the given value is not nil.
func (ru *RefundUpdate) SetNillablePaymentRefundID(u *uuid.UUID) *RefundUpdate {
	if u != nil {
		ru.SetPaymentRefundID(*u)
	}
	return ru
}

// ClearPaymentRefundID clears the value of the "payment_refund_id" field.
func (ru *RefundUpdate) ClearPaymentRefundID() *RefundUpdate {
	ru.mutation.ClearPaymentRefundID()
	return ru
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (ru *RefundUpdate) SetOrderID(id uuid.UUID) *RefundUpdate {
	ru.mutation.SetOrderID(id)
	return ru
}

// SetNillableOrderID sets the "order" edge to the Order entity by ID if the given value is not nil.
func (ru *RefundUpdate) SetNillableOrderID(id *uuid.UUID) *RefundUpdate {
	if id != nil {
		ru = ru.SetOrderID(*id)
	}
	return ru
}

// SetOrder sets the "order" edge to the Order entity.
func (ru *RefundUpdate) SetOrder(o *Order) *RefundUpdate {
	return ru.SetOrderID(o.ID)
}

// AddItemIDs adds the "items" edge to the OrderItem entity by IDs.
func (ru *RefundUpdate) AddItemIDs(ids ...uuid.UUID) *RefundUpdate {
	ru.mutation.AddItemIDs(ids...)
	return ru
}

// AddItems adds the "items" edges to the OrderItem entity.
func (ru *RefundUpdate) AddItems(o ...*OrderItem) *RefundUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ru.AddItemIDs(ids...)
}

// Mutation returns the RefundMutation object of the builder.
func (ru *RefundUpdate) Mutation() *RefundMutation {
	return ru.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (ru *RefundUpdate) ClearOrder() *RefundUpdate {
	ru.mutation.ClearOrder()
	return ru
}

// ClearItems clears all "items" edges to the OrderItem entity.
func (ru *RefundUpdate) ClearItems() *RefundUpdate {
	ru.mutation.ClearItems()
	return ru
}

// RemoveItemIDs removes the "items" edge to OrderItem entities by IDs.
func (ru *RefundUpdate) RemoveItemIDs(ids ...uuid.UUID) *RefundUpdate {
	ru.mutation.RemoveItemIDs(ids...)
	return ru
}

// RemoveItems removes "items" edges to OrderItem entities.
func (ru *RefundUpdate) RemoveItems(o ...*OrderItem) *RefundUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ru.RemoveItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RefundUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RefundUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RefundUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RefundUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RefundUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := refund.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RefundUpdate) check() error {
	if v, ok := ru.mutation.Status(); ok {
		if err := refund.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Refund.status": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Amount(); ok {
		if err := refund.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Refund.amount": %w`, err)}
		}
	}
	return nil
}

func (ru *RefundUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(refund.Table, refund.Columns, sqlgraph.NewFieldSpec(refund.FieldID, field.TypeUUID))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(refund.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.SetField(refund.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ru.mutation.Amount(); ok {
		_spec.SetField(refund.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := ru.mutation.AddedAmount(); ok {
		_spec.AddField(refund.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := ru.mutation.Reason(); ok {
		_spec.SetField(refund.FieldReason, field.TypeString, value)
	}
	if value, ok := ru.mutation.PaymentRefundID(); ok {
		_spec.SetField(refund.FieldPaymentRefundID, field.TypeUUID, value)
	}
	if ru.mutation.PaymentRefundIDCleared() {
		_spec.ClearField(refund.FieldPaymentRefundID, field.TypeUUID)
	}
	if ru.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   refund.OrderTable,
			Columns: []string{refund.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   refund.OrderTable,
			Columns: []string{refund.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   refund.ItemsTable,
			Columns: []string{refund.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedItemsIDs(); len(nodes) > 0 && !ru.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   refund.ItemsTable,
			Columns: []string{refund.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   refund.ItemsTable,
			Columns: []string{refund.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{refund.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RefundUpdateOne is the builder for updating a single Refund entity.
type RefundUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RefundMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RefundUpdateOne) SetUpdatedAt(t time.Time) *RefundUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *RefundUpdateOne) SetStatus(r refund.Status) *RefundUpdateOne {
	ruo.mutation.SetStatus(r)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillableStatus(r *refund.Status) *RefundUpdateOne {
	if r != nil {
		ruo.SetStatus(*r)
	}
	return ruo
}

// SetAmount sets the "amount" field.
func (ruo *RefundUpdateOne) SetAmount(f float64) *RefundUpdateOne {
	ruo.mutation.ResetAmount()
	ruo.mutation.SetAmount(f)
	return ruo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillableAmount(f *float64) *RefundUpdateOne {
	if f != nil {
		ruo.SetAmount(*f)
	}
	return ruo
}

// AddAmount adds f to the "amount" field.
func (ruo *RefundUpdateOne) AddAmount(f float64) *RefundUpdateOne {
	ruo.mutation.AddAmount(f)
	return ruo
}

// SetReason sets the "reason" field.
func (ruo *RefundUpdateOne) SetReason(s string) *RefundUpdateOne {
	ruo.mutation.SetReason(s)
	return ruo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillableReason(s *string) *RefundUpdateOne {
	if s != nil {
		ruo.SetReason(*s)
	}
	return ruo
}

// SetPaymentRefundID sets the "payment_refund_id" field.
func (ruo *RefundUpdateOne) SetPaymentRefundID(u uuid.UUID) *RefundUpdateOne {
	ruo.mutation.SetPaymentRefundID(u)
	return ruo
}

// SetNillablePaymentRefundID sets the "payment_refund_id" field if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillablePaymentRefundID(u *uuid.UUID) *RefundUpdateOne {
	if u != nil {
		ruo.SetPaymentRefundID(*u)
	}
	return ruo
}

// ClearPaymentRefundID clears the value of the "payment_refund_id" field.
func (ruo *RefundUpdateOne) ClearPaymentRefundID() *RefundUpdateOne {
	ruo.mutation.ClearPaymentRefundID()
	return ruo
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (ruo *RefundUpdateOne) SetOrderID(id uuid.UUID) *RefundUpdateOne {
	ruo.mutation.SetOrderID(id)
	return ruo
}

// SetNillableOrderID sets the "order" edge to the Order entity by ID if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillableOrderID(id *uuid.UUID) *RefundUpdateOne {
	if id != nil {
		ruo = ruo.SetOrderID(*id)
	}
	return ruo
}

// SetOrder sets the "order" edge to the Order entity.
func (ruo *RefundUpdateOne) SetOrder(o *Order) *RefundUpdateOne {
	return ruo.SetOrderID(o.ID)
}

// AddItemIDs adds the "items" edge to the OrderItem entity by IDs.
func (ruo *RefundUpdateOne) AddItemIDs(ids ...uuid.UUID) *RefundUpdateOne {
	ruo.mutation.AddItemIDs(ids...)
	return ruo
}

// AddItems adds the "items" edges to the OrderItem entity.
func (ruo *RefundUpdateOne) AddItems(o ...*OrderItem) *RefundUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ruo.AddItemIDs(ids...)
}

// Mutation returns the RefundMutation object of the builder.
func (ruo *RefundUpdateOne) Mutation() *RefundMutation {
	return ruo.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (ruo *RefundUpdateOne) ClearOrder() *RefundUpdateOne {
	ruo.mutation.ClearOrder()
	return ruo
}

// ClearItems clears all "items" edges to the OrderItem entity.
func (ruo *RefundUpdateOne) ClearItems() *RefundUpdateOne {
	ruo.mutation.ClearItems()
	return ruo
}

// RemoveItemIDs removes the "items" edge to OrderItem entities by IDs.
func (ruo *RefundUpdateOne) RemoveItemIDs(ids ...uuid.UUID) *RefundUpdateOne {
	ruo.mutation.RemoveItemIDs(ids...)
	return ruo
}

// RemoveItems removes "items" edges to OrderItem entities.
func (ruo *RefundUpdateOne) RemoveItems(o ...*OrderItem) *RefundUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ruo.RemoveItemIDs(ids...)
}

// Where appends a list predicates to the RefundUpdate builder.
func (ruo *RefundUpdateOne) Where(ps ...predicate.Refund) *RefundUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RefundUpdateOne) Select(field string, fields ...string) *RefundUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Refund entity.
func (ruo *RefundUpdateOne) Save(ctx context.Context) (*Refund, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RefundUpdateOne) SaveX(ctx context.Context) *Refund {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RefundUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RefundUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RefundUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := refund.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RefundUpdateOne) check() error {
	if v, ok := ruo.mutation.Status(); ok {
		if err := refund.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Refund.status": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Amount(); ok {
		if err := refund.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Refund.amount": %w`, err)}
		}
	}
	return nil
}

func (ruo *RefundUpdateOne) sqlSave(ctx context.Context) (_node *Refund, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(refund.Table, refund.Columns, sqlgraph.NewFieldSpec(refund.FieldID, field.TypeUUID))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Refund.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, refund.FieldID)
		for _, f := range fields {
			if !refund.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != refund.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(refund.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.SetField(refund.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ruo.mutation.Amount(); ok {
		_spec.SetField(refund.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := ruo.mutation.AddedAmount(); ok {
		_spec.AddField(refund.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := ruo.mutation.Reason(); ok {
		_spec.SetField(refund.FieldReason, field.TypeString, value)
	}
	if value, ok := ruo.mutation.PaymentRefundID(); ok {
		_spec.SetField(refund.FieldPaymentRefundID, field.TypeUUID, value)
	}
	if ruo.mutation.PaymentRefundIDCleared() {
		_spec.ClearField(refund.FieldPaymentRefundID, field.TypeUUID)
	}
	if ruo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   refund.OrderTable,
			Columns: []string{refund.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   refund.OrderTable,
			Columns: []string{refund.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   refund.ItemsTable,
			Columns: []string{refund.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedItemsIDs(); len(nodes) > 0 && !ruo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   refund.ItemsTable,
			Columns: []string{refund.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   refund.ItemsTable,
			Columns: []string{refund.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Refund{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{refund.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
