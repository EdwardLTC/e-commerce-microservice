// Code generated by ent, DO NOT EDIT.

package refund

import (
	"golang-order/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Refund {
	return predicate.Refund(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Refund {
	return predicate.Refund(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Refund {
	return predicate.Refund(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Refund {
	return predicate.Refund(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Refund {
	return predicate.Refund(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Refund {
	return predicate.Refund(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Refund {
	return predicate.Refund(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Refund {
	return predicate.Refund(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Refund {
	return predicate.Refund(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Refund {
	return predicate.Refund(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Refund {
	return predicate.Refund(sql.FieldEQ(FieldUpdatedAt, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.Refund {
	return predicate.Refund(sql.FieldEQ(FieldAmount, v))
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.Refund {
	return predicate.Refund(sql.FieldEQ(FieldReason, v))
}

// PaymentRefundID applies equality check predicate on the "payment_refund_id" field. It's identical to PaymentRefundIDEQ.
func PaymentRefundID(v uuid.UUID) predicate.Refund {
	return predicate.Refund(sql.FieldEQ(FieldPaymentRefundID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Refund {
	return predicate.Refund(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Refund {
	return predicate.Refund(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Refund {
	return predicate.Refund(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Refund {
	return predicate.Refund(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Refund {
	return predicate.Refund(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Refund {
	return predicate.Refund(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Refund {
	return predicate.Refund(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Refund {
	return predicate.Refund(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Refund {
	return predicate.Refund(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Refund {
	return predicate.Refund(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Refund {
	return predicate.Refund(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Refund {
	return predicate.Refund(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Refund {
	return predicate.Refund(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Refund {
	return predicate.Refund(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Refund {
	return predicate.Refund(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Refund {
	return predicate.Refund(sql.FieldLTE(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Refund {
	return predicate.Refund(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Refund {
	return predicate.Refund(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Refund {
	return predicate.Refund(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Refund {
	return predicate.Refund(sql.FieldNotIn(FieldStatus, vs...))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.Refund {
	return predicate.Refund(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.Refund {
	return predicate.Refund(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.Refund {
	return predicate.Refund(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.Refund {
	return predicate.Refund(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.Refund {
	return predicate.Refund(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.Refund {
	return predicate.Refund(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.Refund {
	return predicate.Refund(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.Refund {
	return predicate.Refund(sql.FieldLTE(FieldAmount, v))
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.Refund {
	return predicate.Refund(sql.FieldEQ(FieldReason, v))
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.Refund {
	return predicate.Refund(sql.FieldNEQ(FieldReason, v))
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.Refund {
	return predicate.Refund(sql.FieldIn(FieldReason, vs...))
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.Refund {
	return predicate.Refund(sql.FieldNotIn(FieldReason, vs...))
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.Refund {
	return predicate.Refund(sql.FieldGT(FieldReason, v))
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.Refund {
	return predicate.Refund(sql.FieldGTE(FieldReason, v))
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.Refund {
	return predicate.Refund(sql.FieldLT(FieldReason, v))
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.Refund {
	return predicate.Refund(sql.FieldLTE(FieldReason, v))
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.Refund {
	return predicate.Refund(sql.FieldContains(FieldReason, v))
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.Refund {
	return predicate.Refund(sql.FieldHasPrefix(FieldReason, v))
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.Refund {
	return predicate.Refund(sql.FieldHasSuffix(FieldReason, v))
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.Refund {
	return predicate.Refund(sql.FieldEqualFold(FieldReason, v))
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.Refund {
	return predicate.Refund(sql.FieldContainsFold(FieldReason, v))
}

// PaymentRefundIDEQ applies the EQ predicate on the "payment_refund_id" field.
func PaymentRefundIDEQ(v uuid.UUID) predicate.Refund {
	return predicate.Refund(sql.FieldEQ(FieldPaymentRefundID, v))
}

// PaymentRefundIDNEQ applies the NEQ predicate on the "payment_refund_id" field.
func PaymentRefundIDNEQ(v uuid.UUID) predicate.Refund {
	return predicate.Refund(sql.FieldNEQ(FieldPaymentRefundID, v))
}

// PaymentRefundIDIn applies the In predicate on the "payment_refund_id" field.
func PaymentRefundIDIn(vs ...uuid.UUID) predicate.Refund {
	return predicate.Refund(sql.FieldIn(FieldPaymentRefundID, vs...))
}

// PaymentRefundIDNotIn applies the NotIn predicate on the "payment_refund_id" field.
func PaymentRefundIDNotIn(vs ...uuid.UUID) predicate.Refund {
	return predicate.Refund(sql.FieldNotIn(FieldPaymentRefundID, vs...))
}

// PaymentRefundIDGT applies the GT predicate on the "payment_refund_id" field.
func PaymentRefundIDGT(v uuid.UUID) predicate.Refund {
	return predicate.Refund(sql.FieldGT(FieldPaymentRefundID, v))
}

// PaymentRefundIDGTE applies the GTE predicate on the "payment_refund_id" field.
func PaymentRefundIDGTE(v uuid.UUID) predicate.Refund {
	return predicate.Refund(sql.FieldGTE(FieldPaymentRefundID, v))
}

// PaymentRefundIDLT applies the LT predicate on the "payment_refund_id" field.
func PaymentRefundIDLT(v uuid.UUID) predicate.Refund {
	return predicate.Refund(sql.FieldLT(FieldPaymentRefundID, v))
}

// PaymentRefundIDLTE applies the LTE predicate on the "payment_refund_id" field.
func PaymentRefundIDLTE(v uuid.UUID) predicate.Refund {
	return predicate.Refund(sql.FieldLTE(FieldPaymentRefundID, v))
}

// PaymentRefundIDIsNil applies the IsNil predicate on the "payment_refund_id" field.
func PaymentRefundIDIsNil() predicate.Refund {
	return predicate.Refund(sql.FieldIsNull(FieldPaymentRefundID))
}

// PaymentRefundIDNotNil applies the NotNil predicate on the "payment_refund_id" field.
func PaymentRefundIDNotNil() predicate.Refund {
	return predicate.Refund(sql.FieldNotNull(FieldPaymentRefundID))
}

// HasOrder applies the HasEdge predicate on the "order" edge.
func HasOrder() predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderTable, OrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderWith applies the HasEdge predicate on the "order" edge with a given conditions (other predicates).
func HasOrderWith(preds ...predicate.Order) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		step := newOrderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasItems applies the HasEdge predicate on the "items" edge.
func HasItems() predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ItemsTable, ItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemsWith applies the HasEdge predicate on the "items" edge with a given conditions (other predicates).
func HasItemsWith(preds ...predicate.OrderItem) predicate.Refund {
	return predicate.Refund(func(s *sql.Selector) {
		step := newItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Refund) predicate.Refund {
	return predicate.Refund(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Refund) predicate.Refund {
	return predicate.Refund(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Refund) predicate.Refund {
	return predicate.Refund(sql.NotPredicates(p))
}
