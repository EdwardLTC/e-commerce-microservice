// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCES:
 *     order.created.avsc
 *     stock.reduction.fail.avsc
 *     stock.reduction.success.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

// Event emitted after a stock reduction is successful
type StockReductionFailedEvent struct {
	Order_id string `json:"order_id"`

	Message string `json:"message"`
}

const StockReductionFailedEventAvroCRC64Fingerprint = "\xf2\xf2a\xfe-Xk\x86"

func NewStockReductionFailedEvent() StockReductionFailedEvent {
	r := StockReductionFailedEvent{}
	return r
}

func DeserializeStockReductionFailedEvent(r io.Reader) (StockReductionFailedEvent, error) {
	t := NewStockReductionFailedEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeStockReductionFailedEventFromSchema(r io.Reader, schema string) (StockReductionFailedEvent, error) {
	t := NewStockReductionFailedEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeStockReductionFailedEvent(r StockReductionFailedEvent, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Order_id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Message, w)
	if err != nil {
		return err
	}
	return err
}

func (r StockReductionFailedEvent) Serialize(w io.Writer) error {
	return writeStockReductionFailedEvent(r, w)
}

func (r StockReductionFailedEvent) Schema() string {
	return "{\"doc\":\"Event emitted after a stock reduction is successful\",\"fields\":[{\"name\":\"order_id\",\"type\":\"string\"},{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"com.example.stock.StockReductionFailedEvent\",\"type\":\"record\"}"
}

func (r StockReductionFailedEvent) SchemaName() string {
	return "com.example.stock.StockReductionFailedEvent"
}

func (_ StockReductionFailedEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ StockReductionFailedEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ StockReductionFailedEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ StockReductionFailedEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ StockReductionFailedEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ StockReductionFailedEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ StockReductionFailedEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ StockReductionFailedEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *StockReductionFailedEvent) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Order_id}

		return w

	case 1:
		w := types.String{Target: &r.Message}

		return w

	}
	panic("Unknown field index")
}

func (r *StockReductionFailedEvent) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *StockReductionFailedEvent) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ StockReductionFailedEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ StockReductionFailedEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ StockReductionFailedEvent) HintSize(int)                     { panic("Unsupported operation") }
func (_ StockReductionFailedEvent) Finalize()                        {}

func (_ StockReductionFailedEvent) AvroCRC64Fingerprint() []byte {
	return []byte(StockReductionFailedEventAvroCRC64Fingerprint)
}

func (r StockReductionFailedEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["order_id"], err = json.Marshal(r.Order_id)
	if err != nil {
		return nil, err
	}
	output["message"], err = json.Marshal(r.Message)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *StockReductionFailedEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["order_id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Order_id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for order_id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["message"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Message); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for message")
	}
	return nil
}
