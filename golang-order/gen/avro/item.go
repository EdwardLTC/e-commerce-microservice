// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     order.created.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Item struct {
	Variant_id string `json:"variant_id"`

	Quantity int32 `json:"quantity"`

	Unit_price float64 `json:"unit_price"`
}

const ItemAvroCRC64Fingerprint = "\xd4ß¾\xaey!\xb4\x83"

func NewItem() Item {
	r := Item{}
	return r
}

func DeserializeItem(r io.Reader) (Item, error) {
	t := NewItem()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeItemFromSchema(r io.Reader, schema string) (Item, error) {
	t := NewItem()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeItem(r Item, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Variant_id, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Quantity, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.Unit_price, w)
	if err != nil {
		return err
	}
	return err
}

func (r Item) Serialize(w io.Writer) error {
	return writeItem(r, w)
}

func (r Item) Schema() string {
	return "{\"fields\":[{\"name\":\"variant_id\",\"type\":\"string\"},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"unit_price\",\"type\":\"double\"}],\"name\":\"com.example.order.Item\",\"type\":\"record\"}"
}

func (r Item) SchemaName() string {
	return "com.example.order.Item"
}

func (_ Item) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Item) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Item) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Item) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Item) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Item) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Item) SetString(v string)   { panic("Unsupported operation") }
func (_ Item) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Item) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Variant_id}

		return w

	case 1:
		w := types.Int{Target: &r.Quantity}

		return w

	case 2:
		w := types.Double{Target: &r.Unit_price}

		return w

	}
	panic("Unknown field index")
}

func (r *Item) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Item) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Item) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Item) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Item) HintSize(int)                     { panic("Unsupported operation") }
func (_ Item) Finalize()                        {}

func (_ Item) AvroCRC64Fingerprint() []byte {
	return []byte(ItemAvroCRC64Fingerprint)
}

func (r Item) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["variant_id"], err = json.Marshal(r.Variant_id)
	if err != nil {
		return nil, err
	}
	output["quantity"], err = json.Marshal(r.Quantity)
	if err != nil {
		return nil, err
	}
	output["unit_price"], err = json.Marshal(r.Unit_price)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Item) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["variant_id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Variant_id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for variant_id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["quantity"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Quantity); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for quantity")
	}
	val = func() json.RawMessage {
		if v, ok := fields["unit_price"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Unit_price); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for unit_price")
	}
	return nil
}
