// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     order.created.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type OrderCreatedEvent struct {
	Order_id string `json:"order_id"`

	Status string `json:"status"`

	Temporary_price float64 `json:"temporary_price"`

	Customer_id string `json:"customer_id"`

	Items []Item `json:"items"`
}

const OrderCreatedEventAvroCRC64Fingerprint = "\xe4\xc8\xf5;F\xe8h\x03"

func NewOrderCreatedEvent() OrderCreatedEvent {
	r := OrderCreatedEvent{}
	r.Items = make([]Item, 0)

	return r
}

func DeserializeOrderCreatedEvent(r io.Reader) (OrderCreatedEvent, error) {
	t := NewOrderCreatedEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeOrderCreatedEventFromSchema(r io.Reader, schema string) (OrderCreatedEvent, error) {
	t := NewOrderCreatedEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeOrderCreatedEvent(r OrderCreatedEvent, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Order_id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Status, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.Temporary_price, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Customer_id, w)
	if err != nil {
		return err
	}
	err = writeArrayItem(r.Items, w)
	if err != nil {
		return err
	}
	return err
}

func (r OrderCreatedEvent) Serialize(w io.Writer) error {
	return writeOrderCreatedEvent(r, w)
}

func (r OrderCreatedEvent) Schema() string {
	return "{\"fields\":[{\"name\":\"order_id\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"temporary_price\",\"type\":\"double\"},{\"name\":\"customer_id\",\"type\":\"string\"},{\"name\":\"items\",\"type\":{\"items\":{\"fields\":[{\"name\":\"variant_id\",\"type\":\"string\"},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"unit_price\",\"type\":\"double\"}],\"name\":\"Item\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"com.example.order.OrderCreatedEvent\",\"type\":\"record\"}"
}

func (r OrderCreatedEvent) SchemaName() string {
	return "com.example.order.OrderCreatedEvent"
}

func (_ OrderCreatedEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ OrderCreatedEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ OrderCreatedEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ OrderCreatedEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ OrderCreatedEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ OrderCreatedEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ OrderCreatedEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ OrderCreatedEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *OrderCreatedEvent) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Order_id}

		return w

	case 1:
		w := types.String{Target: &r.Status}

		return w

	case 2:
		w := types.Double{Target: &r.Temporary_price}

		return w

	case 3:
		w := types.String{Target: &r.Customer_id}

		return w

	case 4:
		r.Items = make([]Item, 0)

		w := ArrayItemWrapper{Target: &r.Items}

		return w

	}
	panic("Unknown field index")
}

func (r *OrderCreatedEvent) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *OrderCreatedEvent) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ OrderCreatedEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ OrderCreatedEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ OrderCreatedEvent) HintSize(int)                     { panic("Unsupported operation") }
func (_ OrderCreatedEvent) Finalize()                        {}

func (_ OrderCreatedEvent) AvroCRC64Fingerprint() []byte {
	return []byte(OrderCreatedEventAvroCRC64Fingerprint)
}

func (r OrderCreatedEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["order_id"], err = json.Marshal(r.Order_id)
	if err != nil {
		return nil, err
	}
	output["status"], err = json.Marshal(r.Status)
	if err != nil {
		return nil, err
	}
	output["temporary_price"], err = json.Marshal(r.Temporary_price)
	if err != nil {
		return nil, err
	}
	output["customer_id"], err = json.Marshal(r.Customer_id)
	if err != nil {
		return nil, err
	}
	output["items"], err = json.Marshal(r.Items)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *OrderCreatedEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["order_id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Order_id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for order_id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["status"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Status); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for status")
	}
	val = func() json.RawMessage {
		if v, ok := fields["temporary_price"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Temporary_price); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for temporary_price")
	}
	val = func() json.RawMessage {
		if v, ok := fields["customer_id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Customer_id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for customer_id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["items"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Items); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for items")
	}
	return nil
}
