// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCES:
 *     order.created.avsc
 *     stock.reduction.fail.avsc
 *     stock.reduction.success.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

// Event emitted after a stock reduction is successful
type StockReductionSuccessEvent struct {
	Order_id string `json:"order_id"`

	Price float64 `json:"price"`
}

const StockReductionSuccessEventAvroCRC64Fingerprint = "\xcdx\xbfl\x1d\x92\xbc2"

func NewStockReductionSuccessEvent() StockReductionSuccessEvent {
	r := StockReductionSuccessEvent{}
	return r
}

func DeserializeStockReductionSuccessEvent(r io.Reader) (StockReductionSuccessEvent, error) {
	t := NewStockReductionSuccessEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeStockReductionSuccessEventFromSchema(r io.Reader, schema string) (StockReductionSuccessEvent, error) {
	t := NewStockReductionSuccessEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeStockReductionSuccessEvent(r StockReductionSuccessEvent, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Order_id, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.Price, w)
	if err != nil {
		return err
	}
	return err
}

func (r StockReductionSuccessEvent) Serialize(w io.Writer) error {
	return writeStockReductionSuccessEvent(r, w)
}

func (r StockReductionSuccessEvent) Schema() string {
	return "{\"doc\":\"Event emitted after a stock reduction is successful\",\"fields\":[{\"name\":\"order_id\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"double\"}],\"name\":\"com.example.stock.StockReductionSuccessEvent\",\"type\":\"record\"}"
}

func (r StockReductionSuccessEvent) SchemaName() string {
	return "com.example.stock.StockReductionSuccessEvent"
}

func (_ StockReductionSuccessEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ StockReductionSuccessEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ StockReductionSuccessEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ StockReductionSuccessEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ StockReductionSuccessEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ StockReductionSuccessEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ StockReductionSuccessEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ StockReductionSuccessEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *StockReductionSuccessEvent) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Order_id}

		return w

	case 1:
		w := types.Double{Target: &r.Price}

		return w

	}
	panic("Unknown field index")
}

func (r *StockReductionSuccessEvent) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *StockReductionSuccessEvent) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ StockReductionSuccessEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ StockReductionSuccessEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ StockReductionSuccessEvent) HintSize(int)                     { panic("Unsupported operation") }
func (_ StockReductionSuccessEvent) Finalize()                        {}

func (_ StockReductionSuccessEvent) AvroCRC64Fingerprint() []byte {
	return []byte(StockReductionSuccessEventAvroCRC64Fingerprint)
}

func (r StockReductionSuccessEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["order_id"], err = json.Marshal(r.Order_id)
	if err != nil {
		return nil, err
	}
	output["price"], err = json.Marshal(r.Price)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *StockReductionSuccessEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["order_id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Order_id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for order_id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["price"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Price); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for price")
	}
	return nil
}
