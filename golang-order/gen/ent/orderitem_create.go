// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"golang-order/gen/ent/order"
	"golang-order/gen/ent/orderitem"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// OrderItemCreate is the builder for creating a OrderItem entity.
type OrderItemCreate struct {
	config
	mutation *OrderItemMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *OrderItemCreate) SetCreatedAt(v time.Time) *OrderItemCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *OrderItemCreate) SetNillableCreatedAt(v *time.Time) *OrderItemCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *OrderItemCreate) SetUpdatedAt(v time.Time) *OrderItemCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *OrderItemCreate) SetNillableUpdatedAt(v *time.Time) *OrderItemCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetProductID sets the "product_id" field.
func (_c *OrderItemCreate) SetProductID(v uuid.UUID) *OrderItemCreate {
	_c.mutation.SetProductID(v)
	return _c
}

// SetVariantID sets the "variant_id" field.
func (_c *OrderItemCreate) SetVariantID(v uuid.UUID) *OrderItemCreate {
	_c.mutation.SetVariantID(v)
	return _c
}

// SetProductName sets the "product_name" field.
func (_c *OrderItemCreate) SetProductName(v string) *OrderItemCreate {
	_c.mutation.SetProductName(v)
	return _c
}

// SetVariantDescription sets the "variant_description" field.
func (_c *OrderItemCreate) SetVariantDescription(v string) *OrderItemCreate {
	_c.mutation.SetVariantDescription(v)
	return _c
}

// SetNillableVariantDescription sets the "variant_description" field if the given value is not nil.
func (_c *OrderItemCreate) SetNillableVariantDescription(v *string) *OrderItemCreate {
	if v != nil {
		_c.SetVariantDescription(*v)
	}
	return _c
}

// SetUnitPrice sets the "unit_price" field.
func (_c *OrderItemCreate) SetUnitPrice(v float64) *OrderItemCreate {
	_c.mutation.SetUnitPrice(v)
	return _c
}

// SetQuantity sets the "quantity" field.
func (_c *OrderItemCreate) SetQuantity(v int) *OrderItemCreate {
	_c.mutation.SetQuantity(v)
	return _c
}

// SetTotalPrice sets the "total_price" field.
func (_c *OrderItemCreate) SetTotalPrice(v float64) *OrderItemCreate {
	_c.mutation.SetTotalPrice(v)
	return _c
}

// SetImageURL sets the "image_url" field.
func (_c *OrderItemCreate) SetImageURL(v string) *OrderItemCreate {
	_c.mutation.SetImageURL(v)
	return _c
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (_c *OrderItemCreate) SetNillableImageURL(v *string) *OrderItemCreate {
	if v != nil {
		_c.SetImageURL(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *OrderItemCreate) SetID(v uuid.UUID) *OrderItemCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *OrderItemCreate) SetNillableID(v *uuid.UUID) *OrderItemCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (_c *OrderItemCreate) SetOrderID(id uuid.UUID) *OrderItemCreate {
	_c.mutation.SetOrderID(id)
	return _c
}

// SetOrder sets the "order" edge to the Order entity.
func (_c *OrderItemCreate) SetOrder(v *Order) *OrderItemCreate {
	return _c.SetOrderID(v.ID)
}

// Mutation returns the OrderItemMutation object of the builder.
func (_c *OrderItemCreate) Mutation() *OrderItemMutation {
	return _c.mutation
}

// Save creates the OrderItem in the database.
func (_c *OrderItemCreate) Save(ctx context.Context) (*OrderItem, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *OrderItemCreate) SaveX(ctx context.Context) *OrderItem {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OrderItemCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OrderItemCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *OrderItemCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := orderitem.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := orderitem.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := orderitem.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *OrderItemCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OrderItem.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OrderItem.updated_at"`)}
	}
	if _, ok := _c.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product_id", err: errors.New(`ent: missing required field "OrderItem.product_id"`)}
	}
	if _, ok := _c.mutation.VariantID(); !ok {
		return &ValidationError{Name: "variant_id", err: errors.New(`ent: missing required field "OrderItem.variant_id"`)}
	}
	if _, ok := _c.mutation.ProductName(); !ok {
		return &ValidationError{Name: "product_name", err: errors.New(`ent: missing required field "OrderItem.product_name"`)}
	}
	if v, ok := _c.mutation.ProductName(); ok {
		if err := orderitem.ProductNameValidator(v); err != nil {
			return &ValidationError{Name: "product_name", err: fmt.Errorf(`ent: validator failed for field "OrderItem.product_name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.UnitPrice(); !ok {
		return &ValidationError{Name: "unit_price", err: errors.New(`ent: missing required field "OrderItem.unit_price"`)}
	}
	if v, ok := _c.mutation.UnitPrice(); ok {
		if err := orderitem.UnitPriceValidator(v); err != nil {
			return &ValidationError{Name: "unit_price", err: fmt.Errorf(`ent: validator failed for field "OrderItem.unit_price": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "OrderItem.quantity"`)}
	}
	if v, ok := _c.mutation.Quantity(); ok {
		if err := orderitem.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "OrderItem.quantity": %w`, err)}
		}
	}
	if _, ok := _c.mutation.TotalPrice(); !ok {
		return &ValidationError{Name: "total_price", err: errors.New(`ent: missing required field "OrderItem.total_price"`)}
	}
	if v, ok := _c.mutation.TotalPrice(); ok {
		if err := orderitem.TotalPriceValidator(v); err != nil {
			return &ValidationError{Name: "total_price", err: fmt.Errorf(`ent: validator failed for field "OrderItem.total_price": %w`, err)}
		}
	}
	if len(_c.mutation.OrderIDs()) == 0 {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required edge "OrderItem.order"`)}
	}
	return nil
}

func (_c *OrderItemCreate) sqlSave(ctx context.Context) (*OrderItem, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *OrderItemCreate) createSpec() (*OrderItem, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderItem{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(orderitem.Table, sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(orderitem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(orderitem.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.ProductID(); ok {
		_spec.SetField(orderitem.FieldProductID, field.TypeUUID, value)
		_node.ProductID = value
	}
	if value, ok := _c.mutation.VariantID(); ok {
		_spec.SetField(orderitem.FieldVariantID, field.TypeUUID, value)
		_node.VariantID = value
	}
	if value, ok := _c.mutation.ProductName(); ok {
		_spec.SetField(orderitem.FieldProductName, field.TypeString, value)
		_node.ProductName = value
	}
	if value, ok := _c.mutation.VariantDescription(); ok {
		_spec.SetField(orderitem.FieldVariantDescription, field.TypeString, value)
		_node.VariantDescription = value
	}
	if value, ok := _c.mutation.UnitPrice(); ok {
		_spec.SetField(orderitem.FieldUnitPrice, field.TypeFloat64, value)
		_node.UnitPrice = value
	}
	if value, ok := _c.mutation.Quantity(); ok {
		_spec.SetField(orderitem.FieldQuantity, field.TypeInt, value)
		_node.Quantity = value
	}
	if value, ok := _c.mutation.TotalPrice(); ok {
		_spec.SetField(orderitem.FieldTotalPrice, field.TypeFloat64, value)
		_node.TotalPrice = value
	}
	if value, ok := _c.mutation.ImageURL(); ok {
		_spec.SetField(orderitem.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if nodes := _c.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderTable,
			Columns: []string{orderitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.order_items = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderItemCreateBulk is the builder for creating many OrderItem entities in bulk.
type OrderItemCreateBulk struct {
	config
	err      error
	builders []*OrderItemCreate
}

// Save creates the OrderItem entities in the database.
func (_c *OrderItemCreateBulk) Save(ctx context.Context) ([]*OrderItem, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*OrderItem, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *OrderItemCreateBulk) SaveX(ctx context.Context) []*OrderItem {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OrderItemCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OrderItemCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
