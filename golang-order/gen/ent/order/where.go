// Code generated by ent, DO NOT EDIT.

package order

import (
	"golang-order/gen/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdatedAt, v))
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCustomerID, v))
}

// Subtotal applies equality check predicate on the "subtotal" field. It's identical to SubtotalEQ.
func Subtotal(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldSubtotal, v))
}

// Tax applies equality check predicate on the "tax" field. It's identical to TaxEQ.
func Tax(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTax, v))
}

// ShippingCost applies equality check predicate on the "shipping_cost" field. It's identical to ShippingCostEQ.
func ShippingCost(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldShippingCost, v))
}

// Total applies equality check predicate on the "total" field. It's identical to TotalEQ.
func Total(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTotal, v))
}

// ShippingAddress applies equality check predicate on the "shipping_address" field. It's identical to ShippingAddressEQ.
func ShippingAddress(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldShippingAddress, v))
}

// BillingAddress applies equality check predicate on the "billing_address" field. It's identical to BillingAddressEQ.
func BillingAddress(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldBillingAddress, v))
}

// ErrorMessage applies equality check predicate on the "error_message" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldErrorMessage, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldUpdatedAt, v))
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCustomerID, v))
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCustomerID, v))
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCustomerID, vs...))
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCustomerID, vs...))
}

// CustomerIDGT applies the GT predicate on the "customer_id" field.
func CustomerIDGT(v uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCustomerID, v))
}

// CustomerIDGTE applies the GTE predicate on the "customer_id" field.
func CustomerIDGTE(v uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCustomerID, v))
}

// CustomerIDLT applies the LT predicate on the "customer_id" field.
func CustomerIDLT(v uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCustomerID, v))
}

// CustomerIDLTE applies the LTE predicate on the "customer_id" field.
func CustomerIDLTE(v uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCustomerID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldStatus, vs...))
}

// SubtotalEQ applies the EQ predicate on the "subtotal" field.
func SubtotalEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldSubtotal, v))
}

// SubtotalNEQ applies the NEQ predicate on the "subtotal" field.
func SubtotalNEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldSubtotal, v))
}

// SubtotalIn applies the In predicate on the "subtotal" field.
func SubtotalIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldSubtotal, vs...))
}

// SubtotalNotIn applies the NotIn predicate on the "subtotal" field.
func SubtotalNotIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldSubtotal, vs...))
}

// SubtotalGT applies the GT predicate on the "subtotal" field.
func SubtotalGT(v float64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldSubtotal, v))
}

// SubtotalGTE applies the GTE predicate on the "subtotal" field.
func SubtotalGTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldSubtotal, v))
}

// SubtotalLT applies the LT predicate on the "subtotal" field.
func SubtotalLT(v float64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldSubtotal, v))
}

// SubtotalLTE applies the LTE predicate on the "subtotal" field.
func SubtotalLTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldSubtotal, v))
}

// TaxEQ applies the EQ predicate on the "tax" field.
func TaxEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTax, v))
}

// TaxNEQ applies the NEQ predicate on the "tax" field.
func TaxNEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldTax, v))
}

// TaxIn applies the In predicate on the "tax" field.
func TaxIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldTax, vs...))
}

// TaxNotIn applies the NotIn predicate on the "tax" field.
func TaxNotIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldTax, vs...))
}

// TaxGT applies the GT predicate on the "tax" field.
func TaxGT(v float64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldTax, v))
}

// TaxGTE applies the GTE predicate on the "tax" field.
func TaxGTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldTax, v))
}

// TaxLT applies the LT predicate on the "tax" field.
func TaxLT(v float64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldTax, v))
}

// TaxLTE applies the LTE predicate on the "tax" field.
func TaxLTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldTax, v))
}

// ShippingCostEQ applies the EQ predicate on the "shipping_cost" field.
func ShippingCostEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldShippingCost, v))
}

// ShippingCostNEQ applies the NEQ predicate on the "shipping_cost" field.
func ShippingCostNEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldShippingCost, v))
}

// ShippingCostIn applies the In predicate on the "shipping_cost" field.
func ShippingCostIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldShippingCost, vs...))
}

// ShippingCostNotIn applies the NotIn predicate on the "shipping_cost" field.
func ShippingCostNotIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldShippingCost, vs...))
}

// ShippingCostGT applies the GT predicate on the "shipping_cost" field.
func ShippingCostGT(v float64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldShippingCost, v))
}

// ShippingCostGTE applies the GTE predicate on the "shipping_cost" field.
func ShippingCostGTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldShippingCost, v))
}

// ShippingCostLT applies the LT predicate on the "shipping_cost" field.
func ShippingCostLT(v float64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldShippingCost, v))
}

// ShippingCostLTE applies the LTE predicate on the "shipping_cost" field.
func ShippingCostLTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldShippingCost, v))
}

// TotalEQ applies the EQ predicate on the "total" field.
func TotalEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTotal, v))
}

// TotalNEQ applies the NEQ predicate on the "total" field.
func TotalNEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldTotal, v))
}

// TotalIn applies the In predicate on the "total" field.
func TotalIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldTotal, vs...))
}

// TotalNotIn applies the NotIn predicate on the "total" field.
func TotalNotIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldTotal, vs...))
}

// TotalGT applies the GT predicate on the "total" field.
func TotalGT(v float64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldTotal, v))
}

// TotalGTE applies the GTE predicate on the "total" field.
func TotalGTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldTotal, v))
}

// TotalLT applies the LT predicate on the "total" field.
func TotalLT(v float64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldTotal, v))
}

// TotalLTE applies the LTE predicate on the "total" field.
func TotalLTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldTotal, v))
}

// ShippingAddressEQ applies the EQ predicate on the "shipping_address" field.
func ShippingAddressEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldShippingAddress, v))
}

// ShippingAddressNEQ applies the NEQ predicate on the "shipping_address" field.
func ShippingAddressNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldShippingAddress, v))
}

// ShippingAddressIn applies the In predicate on the "shipping_address" field.
func ShippingAddressIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldShippingAddress, vs...))
}

// ShippingAddressNotIn applies the NotIn predicate on the "shipping_address" field.
func ShippingAddressNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldShippingAddress, vs...))
}

// ShippingAddressGT applies the GT predicate on the "shipping_address" field.
func ShippingAddressGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldShippingAddress, v))
}

// ShippingAddressGTE applies the GTE predicate on the "shipping_address" field.
func ShippingAddressGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldShippingAddress, v))
}

// ShippingAddressLT applies the LT predicate on the "shipping_address" field.
func ShippingAddressLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldShippingAddress, v))
}

// ShippingAddressLTE applies the LTE predicate on the "shipping_address" field.
func ShippingAddressLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldShippingAddress, v))
}

// ShippingAddressContains applies the Contains predicate on the "shipping_address" field.
func ShippingAddressContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldShippingAddress, v))
}

// ShippingAddressHasPrefix applies the HasPrefix predicate on the "shipping_address" field.
func ShippingAddressHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldShippingAddress, v))
}

// ShippingAddressHasSuffix applies the HasSuffix predicate on the "shipping_address" field.
func ShippingAddressHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldShippingAddress, v))
}

// ShippingAddressEqualFold applies the EqualFold predicate on the "shipping_address" field.
func ShippingAddressEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldShippingAddress, v))
}

// ShippingAddressContainsFold applies the ContainsFold predicate on the "shipping_address" field.
func ShippingAddressContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldShippingAddress, v))
}

// BillingAddressEQ applies the EQ predicate on the "billing_address" field.
func BillingAddressEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldBillingAddress, v))
}

// BillingAddressNEQ applies the NEQ predicate on the "billing_address" field.
func BillingAddressNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldBillingAddress, v))
}

// BillingAddressIn applies the In predicate on the "billing_address" field.
func BillingAddressIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldBillingAddress, vs...))
}

// BillingAddressNotIn applies the NotIn predicate on the "billing_address" field.
func BillingAddressNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldBillingAddress, vs...))
}

// BillingAddressGT applies the GT predicate on the "billing_address" field.
func BillingAddressGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldBillingAddress, v))
}

// BillingAddressGTE applies the GTE predicate on the "billing_address" field.
func BillingAddressGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldBillingAddress, v))
}

// BillingAddressLT applies the LT predicate on the "billing_address" field.
func BillingAddressLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldBillingAddress, v))
}

// BillingAddressLTE applies the LTE predicate on the "billing_address" field.
func BillingAddressLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldBillingAddress, v))
}

// BillingAddressContains applies the Contains predicate on the "billing_address" field.
func BillingAddressContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldBillingAddress, v))
}

// BillingAddressHasPrefix applies the HasPrefix predicate on the "billing_address" field.
func BillingAddressHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldBillingAddress, v))
}

// BillingAddressHasSuffix applies the HasSuffix predicate on the "billing_address" field.
func BillingAddressHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldBillingAddress, v))
}

// BillingAddressEqualFold applies the EqualFold predicate on the "billing_address" field.
func BillingAddressEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldBillingAddress, v))
}

// BillingAddressContainsFold applies the ContainsFold predicate on the "billing_address" field.
func BillingAddressContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldBillingAddress, v))
}

// ErrorMessageEQ applies the EQ predicate on the "error_message" field.
func ErrorMessageEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorMessageNEQ applies the NEQ predicate on the "error_message" field.
func ErrorMessageNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldErrorMessage, v))
}

// ErrorMessageIn applies the In predicate on the "error_message" field.
func ErrorMessageIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldErrorMessage, vs...))
}

// ErrorMessageNotIn applies the NotIn predicate on the "error_message" field.
func ErrorMessageNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldErrorMessage, vs...))
}

// ErrorMessageGT applies the GT predicate on the "error_message" field.
func ErrorMessageGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldErrorMessage, v))
}

// ErrorMessageGTE applies the GTE predicate on the "error_message" field.
func ErrorMessageGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldErrorMessage, v))
}

// ErrorMessageLT applies the LT predicate on the "error_message" field.
func ErrorMessageLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldErrorMessage, v))
}

// ErrorMessageLTE applies the LTE predicate on the "error_message" field.
func ErrorMessageLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldErrorMessage, v))
}

// ErrorMessageContains applies the Contains predicate on the "error_message" field.
func ErrorMessageContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldErrorMessage, v))
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "error_message" field.
func ErrorMessageHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldErrorMessage, v))
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "error_message" field.
func ErrorMessageHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldErrorMessage, v))
}

// ErrorMessageIsNil applies the IsNil predicate on the "error_message" field.
func ErrorMessageIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldErrorMessage))
}

// ErrorMessageNotNil applies the NotNil predicate on the "error_message" field.
func ErrorMessageNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldErrorMessage))
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "error_message" field.
func ErrorMessageEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldErrorMessage, v))
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "error_message" field.
func ErrorMessageContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldErrorMessage, v))
}

// HasItems applies the HasEdge predicate on the "items" edge.
func HasItems() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ItemsTable, ItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemsWith applies the HasEdge predicate on the "items" edge with a given conditions (other predicates).
func HasItemsWith(preds ...predicate.OrderItem) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Order) predicate.Order {
	return predicate.Order(sql.NotPredicates(p))
}
