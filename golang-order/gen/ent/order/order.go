// Code generated by ent, DO NOT EDIT.

package order

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the order type in the database.
	Label = "order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldSubtotal holds the string denoting the subtotal field in the database.
	FieldSubtotal = "subtotal"
	// FieldTax holds the string denoting the tax field in the database.
	FieldTax = "tax"
	// FieldShippingCost holds the string denoting the shipping_cost field in the database.
	FieldShippingCost = "shipping_cost"
	// FieldTotal holds the string denoting the total field in the database.
	FieldTotal = "total"
	// FieldShippingAddress holds the string denoting the shipping_address field in the database.
	FieldShippingAddress = "shipping_address"
	// FieldBillingAddress holds the string denoting the billing_address field in the database.
	FieldBillingAddress = "billing_address"
	// FieldErrorMessage holds the string denoting the error_message field in the database.
	FieldErrorMessage = "error_message"
	// EdgeItems holds the string denoting the items edge name in mutations.
	EdgeItems = "items"
	// Table holds the table name of the order in the database.
	Table = "orders"
	// ItemsTable is the table that holds the items relation/edge.
	ItemsTable = "order_items"
	// ItemsInverseTable is the table name for the OrderItem entity.
	// It exists in this package in order to avoid circular dependency with the "orderitem" package.
	ItemsInverseTable = "order_items"
	// ItemsColumn is the table column denoting the items relation/edge.
	ItemsColumn = "order_items"
)

// Columns holds all SQL columns for order fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCustomerID,
	FieldStatus,
	FieldSubtotal,
	FieldTax,
	FieldShippingCost,
	FieldTotal,
	FieldShippingAddress,
	FieldBillingAddress,
	FieldErrorMessage,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultSubtotal holds the default value on creation for the "subtotal" field.
	DefaultSubtotal float64
	// SubtotalValidator is a validator for the "subtotal" field. It is called by the builders before save.
	SubtotalValidator func(float64) error
	// DefaultTax holds the default value on creation for the "tax" field.
	DefaultTax float64
	// TaxValidator is a validator for the "tax" field. It is called by the builders before save.
	TaxValidator func(float64) error
	// DefaultShippingCost holds the default value on creation for the "shipping_cost" field.
	DefaultShippingCost float64
	// ShippingCostValidator is a validator for the "shipping_cost" field. It is called by the builders before save.
	ShippingCostValidator func(float64) error
	// DefaultTotal holds the default value on creation for the "total" field.
	DefaultTotal float64
	// TotalValidator is a validator for the "total" field. It is called by the builders before save.
	TotalValidator func(float64) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusCreated is the default value of the Status enum.
const DefaultStatus = StatusCreated

// Status values.
const (
	StatusCreated                 Status = "created"
	StatusPendingInventory        Status = "pending_inventory"
	StatusInventoryReserved       Status = "inventory_reserved"
	StatusInventoryReservedFailed Status = "inventory_reserved_failed"
	StatusPaymentPending          Status = "payment_pending"
	StatusPaymentCompleted        Status = "payment_completed"
	StatusPaymentFailed           Status = "payment_failed"
	StatusShipping                Status = "shipping"
	StatusCompleted               Status = "completed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusCreated, StatusPendingInventory, StatusInventoryReserved, StatusInventoryReservedFailed, StatusPaymentPending, StatusPaymentCompleted, StatusPaymentFailed, StatusShipping, StatusCompleted:
		return nil
	default:
		return fmt.Errorf("order: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Order queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCustomerID orders the results by the customer_id field.
func ByCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// BySubtotal orders the results by the subtotal field.
func BySubtotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubtotal, opts...).ToFunc()
}

// ByTax orders the results by the tax field.
func ByTax(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTax, opts...).ToFunc()
}

// ByShippingCost orders the results by the shipping_cost field.
func ByShippingCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShippingCost, opts...).ToFunc()
}

// ByTotal orders the results by the total field.
func ByTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotal, opts...).ToFunc()
}

// ByShippingAddress orders the results by the shipping_address field.
func ByShippingAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShippingAddress, opts...).ToFunc()
}

// ByBillingAddress orders the results by the billing_address field.
func ByBillingAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingAddress, opts...).ToFunc()
}

// ByErrorMessage orders the results by the error_message field.
func ByErrorMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorMessage, opts...).ToFunc()
}

// ByItemsCount orders the results by items count.
func ByItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newItemsStep(), opts...)
	}
}

// ByItems orders the results by items terms.
func ByItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ItemsTable, ItemsColumn),
	)
}
