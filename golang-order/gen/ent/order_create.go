// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"golang-order/gen/ent/order"
	"golang-order/gen/ent/orderitem"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// OrderCreate is the builder for creating a Order entity.
type OrderCreate struct {
	config
	mutation *OrderMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (oc *OrderCreate) SetCreatedAt(t time.Time) *OrderCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCreatedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetUpdatedAt sets the "updated_at" field.
func (oc *OrderCreate) SetUpdatedAt(t time.Time) *OrderCreate {
	oc.mutation.SetUpdatedAt(t)
	return oc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUpdatedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetUpdatedAt(*t)
	}
	return oc
}

// SetCustomerID sets the "customer_id" field.
func (oc *OrderCreate) SetCustomerID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetCustomerID(u)
	return oc
}

// SetStatus sets the "status" field.
func (oc *OrderCreate) SetStatus(o order.Status) *OrderCreate {
	oc.mutation.SetStatus(o)
	return oc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (oc *OrderCreate) SetNillableStatus(o *order.Status) *OrderCreate {
	if o != nil {
		oc.SetStatus(*o)
	}
	return oc
}

// SetSubtotal sets the "subtotal" field.
func (oc *OrderCreate) SetSubtotal(f float64) *OrderCreate {
	oc.mutation.SetSubtotal(f)
	return oc
}

// SetNillableSubtotal sets the "subtotal" field if the given value is not nil.
func (oc *OrderCreate) SetNillableSubtotal(f *float64) *OrderCreate {
	if f != nil {
		oc.SetSubtotal(*f)
	}
	return oc
}

// SetTax sets the "tax" field.
func (oc *OrderCreate) SetTax(f float64) *OrderCreate {
	oc.mutation.SetTax(f)
	return oc
}

// SetNillableTax sets the "tax" field if the given value is not nil.
func (oc *OrderCreate) SetNillableTax(f *float64) *OrderCreate {
	if f != nil {
		oc.SetTax(*f)
	}
	return oc
}

// SetShippingCost sets the "shipping_cost" field.
func (oc *OrderCreate) SetShippingCost(f float64) *OrderCreate {
	oc.mutation.SetShippingCost(f)
	return oc
}

// SetNillableShippingCost sets the "shipping_cost" field if the given value is not nil.
func (oc *OrderCreate) SetNillableShippingCost(f *float64) *OrderCreate {
	if f != nil {
		oc.SetShippingCost(*f)
	}
	return oc
}

// SetTotal sets the "total" field.
func (oc *OrderCreate) SetTotal(f float64) *OrderCreate {
	oc.mutation.SetTotal(f)
	return oc
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (oc *OrderCreate) SetNillableTotal(f *float64) *OrderCreate {
	if f != nil {
		oc.SetTotal(*f)
	}
	return oc
}

// SetShippingAddress sets the "shipping_address" field.
func (oc *OrderCreate) SetShippingAddress(s string) *OrderCreate {
	oc.mutation.SetShippingAddress(s)
	return oc
}

// SetBillingAddress sets the "billing_address" field.
func (oc *OrderCreate) SetBillingAddress(s string) *OrderCreate {
	oc.mutation.SetBillingAddress(s)
	return oc
}

// SetPaymentIntentID sets the "payment_intent_id" field.
func (oc *OrderCreate) SetPaymentIntentID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetPaymentIntentID(u)
	return oc
}

// SetNillablePaymentIntentID sets the "payment_intent_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillablePaymentIntentID(u *uuid.UUID) *OrderCreate {
	if u != nil {
		oc.SetPaymentIntentID(*u)
	}
	return oc
}

// SetID sets the "id" field.
func (oc *OrderCreate) SetID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetID(u)
	return oc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableID(u *uuid.UUID) *OrderCreate {
	if u != nil {
		oc.SetID(*u)
	}
	return oc
}

// AddItemIDs adds the "items" edge to the OrderItem entity by IDs.
func (oc *OrderCreate) AddItemIDs(ids ...uuid.UUID) *OrderCreate {
	oc.mutation.AddItemIDs(ids...)
	return oc
}

// AddItems adds the "items" edges to the OrderItem entity.
func (oc *OrderCreate) AddItems(o ...*OrderItem) *OrderCreate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddItemIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (oc *OrderCreate) Mutation() *OrderMutation {
	return oc.mutation
}

// Save creates the Order in the database.
func (oc *OrderCreate) Save(ctx context.Context) (*Order, error) {
	oc.defaults()
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrderCreate) SaveX(ctx context.Context) *Order {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrderCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrderCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OrderCreate) defaults() {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := order.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		v := order.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oc.mutation.Status(); !ok {
		v := order.DefaultStatus
		oc.mutation.SetStatus(v)
	}
	if _, ok := oc.mutation.Subtotal(); !ok {
		v := order.DefaultSubtotal
		oc.mutation.SetSubtotal(v)
	}
	if _, ok := oc.mutation.Tax(); !ok {
		v := order.DefaultTax
		oc.mutation.SetTax(v)
	}
	if _, ok := oc.mutation.ShippingCost(); !ok {
		v := order.DefaultShippingCost
		oc.mutation.SetShippingCost(v)
	}
	if _, ok := oc.mutation.Total(); !ok {
		v := order.DefaultTotal
		oc.mutation.SetTotal(v)
	}
	if _, ok := oc.mutation.ID(); !ok {
		v := order.DefaultID()
		oc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrderCreate) check() error {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Order.created_at"`)}
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Order.updated_at"`)}
	}
	if _, ok := oc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`ent: missing required field "Order.customer_id"`)}
	}
	if _, ok := oc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Order.status"`)}
	}
	if v, ok := oc.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	if _, ok := oc.mutation.Subtotal(); !ok {
		return &ValidationError{Name: "subtotal", err: errors.New(`ent: missing required field "Order.subtotal"`)}
	}
	if v, ok := oc.mutation.Subtotal(); ok {
		if err := order.SubtotalValidator(v); err != nil {
			return &ValidationError{Name: "subtotal", err: fmt.Errorf(`ent: validator failed for field "Order.subtotal": %w`, err)}
		}
	}
	if _, ok := oc.mutation.Tax(); !ok {
		return &ValidationError{Name: "tax", err: errors.New(`ent: missing required field "Order.tax"`)}
	}
	if v, ok := oc.mutation.Tax(); ok {
		if err := order.TaxValidator(v); err != nil {
			return &ValidationError{Name: "tax", err: fmt.Errorf(`ent: validator failed for field "Order.tax": %w`, err)}
		}
	}
	if _, ok := oc.mutation.ShippingCost(); !ok {
		return &ValidationError{Name: "shipping_cost", err: errors.New(`ent: missing required field "Order.shipping_cost"`)}
	}
	if v, ok := oc.mutation.ShippingCost(); ok {
		if err := order.ShippingCostValidator(v); err != nil {
			return &ValidationError{Name: "shipping_cost", err: fmt.Errorf(`ent: validator failed for field "Order.shipping_cost": %w`, err)}
		}
	}
	if _, ok := oc.mutation.Total(); !ok {
		return &ValidationError{Name: "total", err: errors.New(`ent: missing required field "Order.total"`)}
	}
	if v, ok := oc.mutation.Total(); ok {
		if err := order.TotalValidator(v); err != nil {
			return &ValidationError{Name: "total", err: fmt.Errorf(`ent: validator failed for field "Order.total": %w`, err)}
		}
	}
	if _, ok := oc.mutation.ShippingAddress(); !ok {
		return &ValidationError{Name: "shipping_address", err: errors.New(`ent: missing required field "Order.shipping_address"`)}
	}
	if _, ok := oc.mutation.BillingAddress(); !ok {
		return &ValidationError{Name: "billing_address", err: errors.New(`ent: missing required field "Order.billing_address"`)}
	}
	return nil
}

func (oc *OrderCreate) sqlSave(ctx context.Context) (*Order, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OrderCreate) createSpec() (*Order, *sqlgraph.CreateSpec) {
	var (
		_node = &Order{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(order.Table, sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID))
	)
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := oc.mutation.CustomerID(); ok {
		_spec.SetField(order.FieldCustomerID, field.TypeUUID, value)
		_node.CustomerID = value
	}
	if value, ok := oc.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := oc.mutation.Subtotal(); ok {
		_spec.SetField(order.FieldSubtotal, field.TypeFloat64, value)
		_node.Subtotal = value
	}
	if value, ok := oc.mutation.Tax(); ok {
		_spec.SetField(order.FieldTax, field.TypeFloat64, value)
		_node.Tax = value
	}
	if value, ok := oc.mutation.ShippingCost(); ok {
		_spec.SetField(order.FieldShippingCost, field.TypeFloat64, value)
		_node.ShippingCost = value
	}
	if value, ok := oc.mutation.Total(); ok {
		_spec.SetField(order.FieldTotal, field.TypeFloat64, value)
		_node.Total = value
	}
	if value, ok := oc.mutation.ShippingAddress(); ok {
		_spec.SetField(order.FieldShippingAddress, field.TypeString, value)
		_node.ShippingAddress = value
	}
	if value, ok := oc.mutation.BillingAddress(); ok {
		_spec.SetField(order.FieldBillingAddress, field.TypeString, value)
		_node.BillingAddress = value
	}
	if value, ok := oc.mutation.PaymentIntentID(); ok {
		_spec.SetField(order.FieldPaymentIntentID, field.TypeUUID, value)
		_node.PaymentIntentID = value
	}
	if nodes := oc.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderCreateBulk is the builder for creating many Order entities in bulk.
type OrderCreateBulk struct {
	config
	err      error
	builders []*OrderCreate
}

// Save creates the Order entities in the database.
func (ocb *OrderCreateBulk) Save(ctx context.Context) ([]*Order, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Order, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrderCreateBulk) SaveX(ctx context.Context) []*Order {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrderCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrderCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
