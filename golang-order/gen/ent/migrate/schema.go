// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// OrdersColumns holds the columns for the "orders" table.
	OrdersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "customer_id", Type: field.TypeUUID},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"created", "pending_inventory", "inventory_reserved", "inventory_reserved_failed", "payment_pending", "payment_completed", "payment_failed", "shipping", "completed"}, Default: "created"},
		{Name: "subtotal", Type: field.TypeFloat64, Default: 0},
		{Name: "tax", Type: field.TypeFloat64, Default: 0},
		{Name: "shipping_cost", Type: field.TypeFloat64, Default: 0},
		{Name: "total", Type: field.TypeFloat64, Default: 0},
		{Name: "shipping_address", Type: field.TypeString, Size: 2147483647},
		{Name: "billing_address", Type: field.TypeString, Size: 2147483647},
		{Name: "error_message", Type: field.TypeString, Nullable: true, Size: 2147483647},
	}
	// OrdersTable holds the schema information for the "orders" table.
	OrdersTable = &schema.Table{
		Name:       "orders",
		Columns:    OrdersColumns,
		PrimaryKey: []*schema.Column{OrdersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "order_customer_id",
				Unique:  false,
				Columns: []*schema.Column{OrdersColumns[3]},
			},
			{
				Name:    "order_status",
				Unique:  false,
				Columns: []*schema.Column{OrdersColumns[4]},
			},
		},
	}
	// OrderItemsColumns holds the columns for the "order_items" table.
	OrderItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "product_id", Type: field.TypeUUID},
		{Name: "variant_id", Type: field.TypeUUID},
		{Name: "product_name", Type: field.TypeString},
		{Name: "variant_description", Type: field.TypeString, Nullable: true},
		{Name: "unit_price", Type: field.TypeFloat64},
		{Name: "quantity", Type: field.TypeInt},
		{Name: "total_price", Type: field.TypeFloat64},
		{Name: "image_url", Type: field.TypeString, Nullable: true},
		{Name: "order_items", Type: field.TypeUUID},
	}
	// OrderItemsTable holds the schema information for the "order_items" table.
	OrderItemsTable = &schema.Table{
		Name:       "order_items",
		Columns:    OrderItemsColumns,
		PrimaryKey: []*schema.Column{OrderItemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "order_items_orders_items",
				Columns:    []*schema.Column{OrderItemsColumns[11]},
				RefColumns: []*schema.Column{OrdersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// OutboxEventsColumns holds the columns for the "outbox_events" table.
	OutboxEventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "aggregate_type", Type: field.TypeString},
		{Name: "aggregate_id", Type: field.TypeUUID},
		{Name: "event_type", Type: field.TypeString},
		{Name: "payload", Type: field.TypeBytes},
		{Name: "processed", Type: field.TypeBool, Default: false},
	}
	// OutboxEventsTable holds the schema information for the "outbox_events" table.
	OutboxEventsTable = &schema.Table{
		Name:       "outbox_events",
		Columns:    OutboxEventsColumns,
		PrimaryKey: []*schema.Column{OutboxEventsColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		OrdersTable,
		OrderItemsTable,
		OutboxEventsTable,
	}
)

func init() {
	OrderItemsTable.ForeignKeys[0].RefTable = OrdersTable
}
