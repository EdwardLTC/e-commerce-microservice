// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"golang-order/gen/ent/outboxevent"
	"golang-order/gen/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// OutboxEventUpdate is the builder for updating OutboxEvent entities.
type OutboxEventUpdate struct {
	config
	hooks    []Hook
	mutation *OutboxEventMutation
}

// Where appends a list predicates to the OutboxEventUpdate builder.
func (oeu *OutboxEventUpdate) Where(ps ...predicate.OutboxEvent) *OutboxEventUpdate {
	oeu.mutation.Where(ps...)
	return oeu
}

// SetUpdatedAt sets the "updated_at" field.
func (oeu *OutboxEventUpdate) SetUpdatedAt(t time.Time) *OutboxEventUpdate {
	oeu.mutation.SetUpdatedAt(t)
	return oeu
}

// SetAggregateType sets the "aggregate_type" field.
func (oeu *OutboxEventUpdate) SetAggregateType(s string) *OutboxEventUpdate {
	oeu.mutation.SetAggregateType(s)
	return oeu
}

// SetNillableAggregateType sets the "aggregate_type" field if the given value is not nil.
func (oeu *OutboxEventUpdate) SetNillableAggregateType(s *string) *OutboxEventUpdate {
	if s != nil {
		oeu.SetAggregateType(*s)
	}
	return oeu
}

// SetAggregateID sets the "aggregate_id" field.
func (oeu *OutboxEventUpdate) SetAggregateID(u uuid.UUID) *OutboxEventUpdate {
	oeu.mutation.SetAggregateID(u)
	return oeu
}

// SetNillableAggregateID sets the "aggregate_id" field if the given value is not nil.
func (oeu *OutboxEventUpdate) SetNillableAggregateID(u *uuid.UUID) *OutboxEventUpdate {
	if u != nil {
		oeu.SetAggregateID(*u)
	}
	return oeu
}

// SetEventType sets the "event_type" field.
func (oeu *OutboxEventUpdate) SetEventType(s string) *OutboxEventUpdate {
	oeu.mutation.SetEventType(s)
	return oeu
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (oeu *OutboxEventUpdate) SetNillableEventType(s *string) *OutboxEventUpdate {
	if s != nil {
		oeu.SetEventType(*s)
	}
	return oeu
}

// SetPayload sets the "payload" field.
func (oeu *OutboxEventUpdate) SetPayload(b []byte) *OutboxEventUpdate {
	oeu.mutation.SetPayload(b)
	return oeu
}

// SetProcessed sets the "processed" field.
func (oeu *OutboxEventUpdate) SetProcessed(b bool) *OutboxEventUpdate {
	oeu.mutation.SetProcessed(b)
	return oeu
}

// SetNillableProcessed sets the "processed" field if the given value is not nil.
func (oeu *OutboxEventUpdate) SetNillableProcessed(b *bool) *OutboxEventUpdate {
	if b != nil {
		oeu.SetProcessed(*b)
	}
	return oeu
}

// Mutation returns the OutboxEventMutation object of the builder.
func (oeu *OutboxEventUpdate) Mutation() *OutboxEventMutation {
	return oeu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oeu *OutboxEventUpdate) Save(ctx context.Context) (int, error) {
	oeu.defaults()
	return withHooks(ctx, oeu.sqlSave, oeu.mutation, oeu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oeu *OutboxEventUpdate) SaveX(ctx context.Context) int {
	affected, err := oeu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oeu *OutboxEventUpdate) Exec(ctx context.Context) error {
	_, err := oeu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oeu *OutboxEventUpdate) ExecX(ctx context.Context) {
	if err := oeu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oeu *OutboxEventUpdate) defaults() {
	if _, ok := oeu.mutation.UpdatedAt(); !ok {
		v := outboxevent.UpdateDefaultUpdatedAt()
		oeu.mutation.SetUpdatedAt(v)
	}
}

func (oeu *OutboxEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(outboxevent.Table, outboxevent.Columns, sqlgraph.NewFieldSpec(outboxevent.FieldID, field.TypeUUID))
	if ps := oeu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oeu.mutation.UpdatedAt(); ok {
		_spec.SetField(outboxevent.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := oeu.mutation.AggregateType(); ok {
		_spec.SetField(outboxevent.FieldAggregateType, field.TypeString, value)
	}
	if value, ok := oeu.mutation.AggregateID(); ok {
		_spec.SetField(outboxevent.FieldAggregateID, field.TypeUUID, value)
	}
	if value, ok := oeu.mutation.EventType(); ok {
		_spec.SetField(outboxevent.FieldEventType, field.TypeString, value)
	}
	if value, ok := oeu.mutation.Payload(); ok {
		_spec.SetField(outboxevent.FieldPayload, field.TypeBytes, value)
	}
	if value, ok := oeu.mutation.Processed(); ok {
		_spec.SetField(outboxevent.FieldProcessed, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oeu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{outboxevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oeu.mutation.done = true
	return n, nil
}

// OutboxEventUpdateOne is the builder for updating a single OutboxEvent entity.
type OutboxEventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OutboxEventMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (oeuo *OutboxEventUpdateOne) SetUpdatedAt(t time.Time) *OutboxEventUpdateOne {
	oeuo.mutation.SetUpdatedAt(t)
	return oeuo
}

// SetAggregateType sets the "aggregate_type" field.
func (oeuo *OutboxEventUpdateOne) SetAggregateType(s string) *OutboxEventUpdateOne {
	oeuo.mutation.SetAggregateType(s)
	return oeuo
}

// SetNillableAggregateType sets the "aggregate_type" field if the given value is not nil.
func (oeuo *OutboxEventUpdateOne) SetNillableAggregateType(s *string) *OutboxEventUpdateOne {
	if s != nil {
		oeuo.SetAggregateType(*s)
	}
	return oeuo
}

// SetAggregateID sets the "aggregate_id" field.
func (oeuo *OutboxEventUpdateOne) SetAggregateID(u uuid.UUID) *OutboxEventUpdateOne {
	oeuo.mutation.SetAggregateID(u)
	return oeuo
}

// SetNillableAggregateID sets the "aggregate_id" field if the given value is not nil.
func (oeuo *OutboxEventUpdateOne) SetNillableAggregateID(u *uuid.UUID) *OutboxEventUpdateOne {
	if u != nil {
		oeuo.SetAggregateID(*u)
	}
	return oeuo
}

// SetEventType sets the "event_type" field.
func (oeuo *OutboxEventUpdateOne) SetEventType(s string) *OutboxEventUpdateOne {
	oeuo.mutation.SetEventType(s)
	return oeuo
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (oeuo *OutboxEventUpdateOne) SetNillableEventType(s *string) *OutboxEventUpdateOne {
	if s != nil {
		oeuo.SetEventType(*s)
	}
	return oeuo
}

// SetPayload sets the "payload" field.
func (oeuo *OutboxEventUpdateOne) SetPayload(b []byte) *OutboxEventUpdateOne {
	oeuo.mutation.SetPayload(b)
	return oeuo
}

// SetProcessed sets the "processed" field.
func (oeuo *OutboxEventUpdateOne) SetProcessed(b bool) *OutboxEventUpdateOne {
	oeuo.mutation.SetProcessed(b)
	return oeuo
}

// SetNillableProcessed sets the "processed" field if the given value is not nil.
func (oeuo *OutboxEventUpdateOne) SetNillableProcessed(b *bool) *OutboxEventUpdateOne {
	if b != nil {
		oeuo.SetProcessed(*b)
	}
	return oeuo
}

// Mutation returns the OutboxEventMutation object of the builder.
func (oeuo *OutboxEventUpdateOne) Mutation() *OutboxEventMutation {
	return oeuo.mutation
}

// Where appends a list predicates to the OutboxEventUpdate builder.
func (oeuo *OutboxEventUpdateOne) Where(ps ...predicate.OutboxEvent) *OutboxEventUpdateOne {
	oeuo.mutation.Where(ps...)
	return oeuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oeuo *OutboxEventUpdateOne) Select(field string, fields ...string) *OutboxEventUpdateOne {
	oeuo.fields = append([]string{field}, fields...)
	return oeuo
}

// Save executes the query and returns the updated OutboxEvent entity.
func (oeuo *OutboxEventUpdateOne) Save(ctx context.Context) (*OutboxEvent, error) {
	oeuo.defaults()
	return withHooks(ctx, oeuo.sqlSave, oeuo.mutation, oeuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oeuo *OutboxEventUpdateOne) SaveX(ctx context.Context) *OutboxEvent {
	node, err := oeuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oeuo *OutboxEventUpdateOne) Exec(ctx context.Context) error {
	_, err := oeuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oeuo *OutboxEventUpdateOne) ExecX(ctx context.Context) {
	if err := oeuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oeuo *OutboxEventUpdateOne) defaults() {
	if _, ok := oeuo.mutation.UpdatedAt(); !ok {
		v := outboxevent.UpdateDefaultUpdatedAt()
		oeuo.mutation.SetUpdatedAt(v)
	}
}

func (oeuo *OutboxEventUpdateOne) sqlSave(ctx context.Context) (_node *OutboxEvent, err error) {
	_spec := sqlgraph.NewUpdateSpec(outboxevent.Table, outboxevent.Columns, sqlgraph.NewFieldSpec(outboxevent.FieldID, field.TypeUUID))
	id, ok := oeuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OutboxEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oeuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, outboxevent.FieldID)
		for _, f := range fields {
			if !outboxevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != outboxevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oeuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oeuo.mutation.UpdatedAt(); ok {
		_spec.SetField(outboxevent.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := oeuo.mutation.AggregateType(); ok {
		_spec.SetField(outboxevent.FieldAggregateType, field.TypeString, value)
	}
	if value, ok := oeuo.mutation.AggregateID(); ok {
		_spec.SetField(outboxevent.FieldAggregateID, field.TypeUUID, value)
	}
	if value, ok := oeuo.mutation.EventType(); ok {
		_spec.SetField(outboxevent.FieldEventType, field.TypeString, value)
	}
	if value, ok := oeuo.mutation.Payload(); ok {
		_spec.SetField(outboxevent.FieldPayload, field.TypeBytes, value)
	}
	if value, ok := oeuo.mutation.Processed(); ok {
		_spec.SetField(outboxevent.FieldProcessed, field.TypeBool, value)
	}
	_node = &OutboxEvent{config: oeuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oeuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{outboxevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oeuo.mutation.done = true
	return _node, nil
}
