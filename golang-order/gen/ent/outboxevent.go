// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"golang-order/gen/ent/outboxevent"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// OutboxEvent is the model entity for the OutboxEvent schema.
type OutboxEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// AggregateType holds the value of the "aggregate_type" field.
	AggregateType string `json:"aggregate_type,omitempty"`
	// AggregateID holds the value of the "aggregate_id" field.
	AggregateID uuid.UUID `json:"aggregate_id,omitempty"`
	// EventType holds the value of the "event_type" field.
	EventType string `json:"event_type,omitempty"`
	// Payload holds the value of the "payload" field.
	Payload []byte `json:"payload,omitempty"`
	// Processed holds the value of the "processed" field.
	Processed    bool `json:"processed,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OutboxEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case outboxevent.FieldPayload:
			values[i] = new([]byte)
		case outboxevent.FieldProcessed:
			values[i] = new(sql.NullBool)
		case outboxevent.FieldAggregateType, outboxevent.FieldEventType:
			values[i] = new(sql.NullString)
		case outboxevent.FieldCreatedAt, outboxevent.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case outboxevent.FieldID, outboxevent.FieldAggregateID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OutboxEvent fields.
func (oe *OutboxEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case outboxevent.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				oe.ID = *value
			}
		case outboxevent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oe.CreatedAt = value.Time
			}
		case outboxevent.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				oe.UpdatedAt = value.Time
			}
		case outboxevent.FieldAggregateType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field aggregate_type", values[i])
			} else if value.Valid {
				oe.AggregateType = value.String
			}
		case outboxevent.FieldAggregateID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field aggregate_id", values[i])
			} else if value != nil {
				oe.AggregateID = *value
			}
		case outboxevent.FieldEventType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_type", values[i])
			} else if value.Valid {
				oe.EventType = value.String
			}
		case outboxevent.FieldPayload:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field payload", values[i])
			} else if value != nil {
				oe.Payload = *value
			}
		case outboxevent.FieldProcessed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field processed", values[i])
			} else if value.Valid {
				oe.Processed = value.Bool
			}
		default:
			oe.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OutboxEvent.
// This includes values selected through modifiers, order, etc.
func (oe *OutboxEvent) Value(name string) (ent.Value, error) {
	return oe.selectValues.Get(name)
}

// Update returns a builder for updating this OutboxEvent.
// Note that you need to call OutboxEvent.Unwrap() before calling this method if this OutboxEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (oe *OutboxEvent) Update() *OutboxEventUpdateOne {
	return NewOutboxEventClient(oe.config).UpdateOne(oe)
}

// Unwrap unwraps the OutboxEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oe *OutboxEvent) Unwrap() *OutboxEvent {
	_tx, ok := oe.config.driver.(*txDriver)
	if !ok {
		panic("ent: OutboxEvent is not a transactional entity")
	}
	oe.config.driver = _tx.drv
	return oe
}

// String implements the fmt.Stringer.
func (oe *OutboxEvent) String() string {
	var builder strings.Builder
	builder.WriteString("OutboxEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oe.ID))
	builder.WriteString("created_at=")
	builder.WriteString(oe.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(oe.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("aggregate_type=")
	builder.WriteString(oe.AggregateType)
	builder.WriteString(", ")
	builder.WriteString("aggregate_id=")
	builder.WriteString(fmt.Sprintf("%v", oe.AggregateID))
	builder.WriteString(", ")
	builder.WriteString("event_type=")
	builder.WriteString(oe.EventType)
	builder.WriteString(", ")
	builder.WriteString("payload=")
	builder.WriteString(fmt.Sprintf("%v", oe.Payload))
	builder.WriteString(", ")
	builder.WriteString("processed=")
	builder.WriteString(fmt.Sprintf("%v", oe.Processed))
	builder.WriteByte(')')
	return builder.String()
}

// OutboxEvents is a parsable slice of OutboxEvent.
type OutboxEvents []*OutboxEvent
