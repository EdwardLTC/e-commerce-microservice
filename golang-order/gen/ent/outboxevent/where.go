// Code generated by ent, DO NOT EDIT.

package outboxevent

import (
	"golang-order/gen/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldEQ(FieldUpdatedAt, v))
}

// AggregateType applies equality check predicate on the "aggregate_type" field. It's identical to AggregateTypeEQ.
func AggregateType(v string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldEQ(FieldAggregateType, v))
}

// AggregateID applies equality check predicate on the "aggregate_id" field. It's identical to AggregateIDEQ.
func AggregateID(v uuid.UUID) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldEQ(FieldAggregateID, v))
}

// EventType applies equality check predicate on the "event_type" field. It's identical to EventTypeEQ.
func EventType(v string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldEQ(FieldEventType, v))
}

// Payload applies equality check predicate on the "payload" field. It's identical to PayloadEQ.
func Payload(v []byte) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldEQ(FieldPayload, v))
}

// Processed applies equality check predicate on the "processed" field. It's identical to ProcessedEQ.
func Processed(v bool) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldEQ(FieldProcessed, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldLTE(FieldUpdatedAt, v))
}

// AggregateTypeEQ applies the EQ predicate on the "aggregate_type" field.
func AggregateTypeEQ(v string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldEQ(FieldAggregateType, v))
}

// AggregateTypeNEQ applies the NEQ predicate on the "aggregate_type" field.
func AggregateTypeNEQ(v string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldNEQ(FieldAggregateType, v))
}

// AggregateTypeIn applies the In predicate on the "aggregate_type" field.
func AggregateTypeIn(vs ...string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldIn(FieldAggregateType, vs...))
}

// AggregateTypeNotIn applies the NotIn predicate on the "aggregate_type" field.
func AggregateTypeNotIn(vs ...string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldNotIn(FieldAggregateType, vs...))
}

// AggregateTypeGT applies the GT predicate on the "aggregate_type" field.
func AggregateTypeGT(v string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldGT(FieldAggregateType, v))
}

// AggregateTypeGTE applies the GTE predicate on the "aggregate_type" field.
func AggregateTypeGTE(v string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldGTE(FieldAggregateType, v))
}

// AggregateTypeLT applies the LT predicate on the "aggregate_type" field.
func AggregateTypeLT(v string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldLT(FieldAggregateType, v))
}

// AggregateTypeLTE applies the LTE predicate on the "aggregate_type" field.
func AggregateTypeLTE(v string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldLTE(FieldAggregateType, v))
}

// AggregateTypeContains applies the Contains predicate on the "aggregate_type" field.
func AggregateTypeContains(v string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldContains(FieldAggregateType, v))
}

// AggregateTypeHasPrefix applies the HasPrefix predicate on the "aggregate_type" field.
func AggregateTypeHasPrefix(v string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldHasPrefix(FieldAggregateType, v))
}

// AggregateTypeHasSuffix applies the HasSuffix predicate on the "aggregate_type" field.
func AggregateTypeHasSuffix(v string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldHasSuffix(FieldAggregateType, v))
}

// AggregateTypeEqualFold applies the EqualFold predicate on the "aggregate_type" field.
func AggregateTypeEqualFold(v string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldEqualFold(FieldAggregateType, v))
}

// AggregateTypeContainsFold applies the ContainsFold predicate on the "aggregate_type" field.
func AggregateTypeContainsFold(v string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldContainsFold(FieldAggregateType, v))
}

// AggregateIDEQ applies the EQ predicate on the "aggregate_id" field.
func AggregateIDEQ(v uuid.UUID) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldEQ(FieldAggregateID, v))
}

// AggregateIDNEQ applies the NEQ predicate on the "aggregate_id" field.
func AggregateIDNEQ(v uuid.UUID) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldNEQ(FieldAggregateID, v))
}

// AggregateIDIn applies the In predicate on the "aggregate_id" field.
func AggregateIDIn(vs ...uuid.UUID) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldIn(FieldAggregateID, vs...))
}

// AggregateIDNotIn applies the NotIn predicate on the "aggregate_id" field.
func AggregateIDNotIn(vs ...uuid.UUID) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldNotIn(FieldAggregateID, vs...))
}

// AggregateIDGT applies the GT predicate on the "aggregate_id" field.
func AggregateIDGT(v uuid.UUID) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldGT(FieldAggregateID, v))
}

// AggregateIDGTE applies the GTE predicate on the "aggregate_id" field.
func AggregateIDGTE(v uuid.UUID) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldGTE(FieldAggregateID, v))
}

// AggregateIDLT applies the LT predicate on the "aggregate_id" field.
func AggregateIDLT(v uuid.UUID) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldLT(FieldAggregateID, v))
}

// AggregateIDLTE applies the LTE predicate on the "aggregate_id" field.
func AggregateIDLTE(v uuid.UUID) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldLTE(FieldAggregateID, v))
}

// EventTypeEQ applies the EQ predicate on the "event_type" field.
func EventTypeEQ(v string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldEQ(FieldEventType, v))
}

// EventTypeNEQ applies the NEQ predicate on the "event_type" field.
func EventTypeNEQ(v string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldNEQ(FieldEventType, v))
}

// EventTypeIn applies the In predicate on the "event_type" field.
func EventTypeIn(vs ...string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldIn(FieldEventType, vs...))
}

// EventTypeNotIn applies the NotIn predicate on the "event_type" field.
func EventTypeNotIn(vs ...string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldNotIn(FieldEventType, vs...))
}

// EventTypeGT applies the GT predicate on the "event_type" field.
func EventTypeGT(v string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldGT(FieldEventType, v))
}

// EventTypeGTE applies the GTE predicate on the "event_type" field.
func EventTypeGTE(v string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldGTE(FieldEventType, v))
}

// EventTypeLT applies the LT predicate on the "event_type" field.
func EventTypeLT(v string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldLT(FieldEventType, v))
}

// EventTypeLTE applies the LTE predicate on the "event_type" field.
func EventTypeLTE(v string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldLTE(FieldEventType, v))
}

// EventTypeContains applies the Contains predicate on the "event_type" field.
func EventTypeContains(v string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldContains(FieldEventType, v))
}

// EventTypeHasPrefix applies the HasPrefix predicate on the "event_type" field.
func EventTypeHasPrefix(v string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldHasPrefix(FieldEventType, v))
}

// EventTypeHasSuffix applies the HasSuffix predicate on the "event_type" field.
func EventTypeHasSuffix(v string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldHasSuffix(FieldEventType, v))
}

// EventTypeEqualFold applies the EqualFold predicate on the "event_type" field.
func EventTypeEqualFold(v string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldEqualFold(FieldEventType, v))
}

// EventTypeContainsFold applies the ContainsFold predicate on the "event_type" field.
func EventTypeContainsFold(v string) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldContainsFold(FieldEventType, v))
}

// PayloadEQ applies the EQ predicate on the "payload" field.
func PayloadEQ(v []byte) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldEQ(FieldPayload, v))
}

// PayloadNEQ applies the NEQ predicate on the "payload" field.
func PayloadNEQ(v []byte) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldNEQ(FieldPayload, v))
}

// PayloadIn applies the In predicate on the "payload" field.
func PayloadIn(vs ...[]byte) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldIn(FieldPayload, vs...))
}

// PayloadNotIn applies the NotIn predicate on the "payload" field.
func PayloadNotIn(vs ...[]byte) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldNotIn(FieldPayload, vs...))
}

// PayloadGT applies the GT predicate on the "payload" field.
func PayloadGT(v []byte) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldGT(FieldPayload, v))
}

// PayloadGTE applies the GTE predicate on the "payload" field.
func PayloadGTE(v []byte) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldGTE(FieldPayload, v))
}

// PayloadLT applies the LT predicate on the "payload" field.
func PayloadLT(v []byte) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldLT(FieldPayload, v))
}

// PayloadLTE applies the LTE predicate on the "payload" field.
func PayloadLTE(v []byte) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldLTE(FieldPayload, v))
}

// ProcessedEQ applies the EQ predicate on the "processed" field.
func ProcessedEQ(v bool) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldEQ(FieldProcessed, v))
}

// ProcessedNEQ applies the NEQ predicate on the "processed" field.
func ProcessedNEQ(v bool) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.FieldNEQ(FieldProcessed, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OutboxEvent) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OutboxEvent) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OutboxEvent) predicate.OutboxEvent {
	return predicate.OutboxEvent(sql.NotPredicates(p))
}
