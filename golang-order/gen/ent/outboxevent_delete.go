// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"golang-order/gen/ent/outboxevent"
	"golang-order/gen/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OutboxEventDelete is the builder for deleting a OutboxEvent entity.
type OutboxEventDelete struct {
	config
	hooks    []Hook
	mutation *OutboxEventMutation
}

// Where appends a list predicates to the OutboxEventDelete builder.
func (oed *OutboxEventDelete) Where(ps ...predicate.OutboxEvent) *OutboxEventDelete {
	oed.mutation.Where(ps...)
	return oed
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (oed *OutboxEventDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, oed.sqlExec, oed.mutation, oed.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (oed *OutboxEventDelete) ExecX(ctx context.Context) int {
	n, err := oed.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (oed *OutboxEventDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(outboxevent.Table, sqlgraph.NewFieldSpec(outboxevent.FieldID, field.TypeUUID))
	if ps := oed.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, oed.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	oed.mutation.done = true
	return affected, err
}

// OutboxEventDeleteOne is the builder for deleting a single OutboxEvent entity.
type OutboxEventDeleteOne struct {
	oed *OutboxEventDelete
}

// Where appends a list predicates to the OutboxEventDelete builder.
func (oedo *OutboxEventDeleteOne) Where(ps ...predicate.OutboxEvent) *OutboxEventDeleteOne {
	oedo.oed.mutation.Where(ps...)
	return oedo
}

// Exec executes the deletion query.
func (oedo *OutboxEventDeleteOne) Exec(ctx context.Context) error {
	n, err := oedo.oed.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{outboxevent.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (oedo *OutboxEventDeleteOne) ExecX(ctx context.Context) {
	if err := oedo.Exec(ctx); err != nil {
		panic(err)
	}
}
