// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: Product.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductService_GetProducts_FullMethodName      = "/com.ecommerce.springboot.product.v1.ProductService/GetProducts"
	ProductService_GetProductDetail_FullMethodName = "/com.ecommerce.springboot.product.v1.ProductService/GetProductDetail"
	ProductService_CreateProduct_FullMethodName    = "/com.ecommerce.springboot.product.v1.ProductService/CreateProduct"
)

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	GetProducts(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*GetProductsResponse, error)
	GetProductDetail(ctx context.Context, in *GetProductDetailRequest, opts ...grpc.CallOption) (*GetProductDetailResponse, error)
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) GetProducts(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*GetProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductsResponse)
	err := c.cc.Invoke(ctx, ProductService_GetProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductDetail(ctx context.Context, in *GetProductDetailRequest, opts ...grpc.CallOption) (*GetProductDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductDetailResponse)
	err := c.cc.Invoke(ctx, ProductService_GetProductDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProductResponse)
	err := c.cc.Invoke(ctx, ProductService_CreateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility.
type ProductServiceServer interface {
	GetProducts(context.Context, *GetProductsRequest) (*GetProductsResponse, error)
	GetProductDetail(context.Context, *GetProductDetailRequest) (*GetProductDetailResponse, error)
	CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductServiceServer struct{}

func (UnimplementedProductServiceServer) GetProducts(context.Context, *GetProductsRequest) (*GetProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedProductServiceServer) GetProductDetail(context.Context, *GetProductDetailRequest) (*GetProductDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductDetail not implemented")
}
func (UnimplementedProductServiceServer) CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}
func (UnimplementedProductServiceServer) testEmbeddedByValue()                        {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProducts(ctx, req.(*GetProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetProductDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductDetail(ctx, req.(*GetProductDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.ecommerce.springboot.product.v1.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProducts",
			Handler:    _ProductService_GetProducts_Handler,
		},
		{
			MethodName: "GetProductDetail",
			Handler:    _ProductService_GetProductDetail_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _ProductService_CreateProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Product.proto",
}

const (
	OptionService_CreateOptionType_FullMethodName  = "/com.ecommerce.springboot.product.v1.OptionService/CreateOptionType"
	OptionService_GetOptionTypes_FullMethodName    = "/com.ecommerce.springboot.product.v1.OptionService/GetOptionTypes"
	OptionService_CreateOptionValue_FullMethodName = "/com.ecommerce.springboot.product.v1.OptionService/CreateOptionValue"
)

// OptionServiceClient is the client API for OptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OptionServiceClient interface {
	CreateOptionType(ctx context.Context, in *CreateOptionTypeRequest, opts ...grpc.CallOption) (*CreateOptionTypeResponse, error)
	GetOptionTypes(ctx context.Context, in *GetOptionTypesRequest, opts ...grpc.CallOption) (*GetOptionTypesResponse, error)
	CreateOptionValue(ctx context.Context, in *CreateOptionValueRequest, opts ...grpc.CallOption) (*CreateOptionValueResponse, error)
}

type optionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOptionServiceClient(cc grpc.ClientConnInterface) OptionServiceClient {
	return &optionServiceClient{cc}
}

func (c *optionServiceClient) CreateOptionType(ctx context.Context, in *CreateOptionTypeRequest, opts ...grpc.CallOption) (*CreateOptionTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOptionTypeResponse)
	err := c.cc.Invoke(ctx, OptionService_CreateOptionType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionServiceClient) GetOptionTypes(ctx context.Context, in *GetOptionTypesRequest, opts ...grpc.CallOption) (*GetOptionTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOptionTypesResponse)
	err := c.cc.Invoke(ctx, OptionService_GetOptionTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionServiceClient) CreateOptionValue(ctx context.Context, in *CreateOptionValueRequest, opts ...grpc.CallOption) (*CreateOptionValueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOptionValueResponse)
	err := c.cc.Invoke(ctx, OptionService_CreateOptionValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OptionServiceServer is the server API for OptionService service.
// All implementations must embed UnimplementedOptionServiceServer
// for forward compatibility.
type OptionServiceServer interface {
	CreateOptionType(context.Context, *CreateOptionTypeRequest) (*CreateOptionTypeResponse, error)
	GetOptionTypes(context.Context, *GetOptionTypesRequest) (*GetOptionTypesResponse, error)
	CreateOptionValue(context.Context, *CreateOptionValueRequest) (*CreateOptionValueResponse, error)
	mustEmbedUnimplementedOptionServiceServer()
}

// UnimplementedOptionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOptionServiceServer struct{}

func (UnimplementedOptionServiceServer) CreateOptionType(context.Context, *CreateOptionTypeRequest) (*CreateOptionTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOptionType not implemented")
}
func (UnimplementedOptionServiceServer) GetOptionTypes(context.Context, *GetOptionTypesRequest) (*GetOptionTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOptionTypes not implemented")
}
func (UnimplementedOptionServiceServer) CreateOptionValue(context.Context, *CreateOptionValueRequest) (*CreateOptionValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOptionValue not implemented")
}
func (UnimplementedOptionServiceServer) mustEmbedUnimplementedOptionServiceServer() {}
func (UnimplementedOptionServiceServer) testEmbeddedByValue()                       {}

// UnsafeOptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OptionServiceServer will
// result in compilation errors.
type UnsafeOptionServiceServer interface {
	mustEmbedUnimplementedOptionServiceServer()
}

func RegisterOptionServiceServer(s grpc.ServiceRegistrar, srv OptionServiceServer) {
	// If the following call pancis, it indicates UnimplementedOptionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OptionService_ServiceDesc, srv)
}

func _OptionService_CreateOptionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOptionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionServiceServer).CreateOptionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionService_CreateOptionType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionServiceServer).CreateOptionType(ctx, req.(*CreateOptionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionService_GetOptionTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOptionTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionServiceServer).GetOptionTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionService_GetOptionTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionServiceServer).GetOptionTypes(ctx, req.(*GetOptionTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionService_CreateOptionValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOptionValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionServiceServer).CreateOptionValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionService_CreateOptionValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionServiceServer).CreateOptionValue(ctx, req.(*CreateOptionValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OptionService_ServiceDesc is the grpc.ServiceDesc for OptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.ecommerce.springboot.product.v1.OptionService",
	HandlerType: (*OptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOptionType",
			Handler:    _OptionService_CreateOptionType_Handler,
		},
		{
			MethodName: "GetOptionTypes",
			Handler:    _OptionService_GetOptionTypes_Handler,
		},
		{
			MethodName: "CreateOptionValue",
			Handler:    _OptionService_CreateOptionValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Product.proto",
}

const (
	VariantService_CreateVariant_FullMethodName = "/com.ecommerce.springboot.product.v1.VariantService/CreateVariant"
	VariantService_ReserveStock_FullMethodName  = "/com.ecommerce.springboot.product.v1.VariantService/ReserveStock"
	VariantService_ReleaseStock_FullMethodName  = "/com.ecommerce.springboot.product.v1.VariantService/ReleaseStock"
)

// VariantServiceClient is the client API for VariantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VariantServiceClient interface {
	CreateVariant(ctx context.Context, in *CreateVariantRequest, opts ...grpc.CallOption) (*CreateVariantResponse, error)
	ReserveStock(ctx context.Context, in *ReserveStockRequest, opts ...grpc.CallOption) (*ReserveStockResponse, error)
	ReleaseStock(ctx context.Context, in *ReleaseStockRequest, opts ...grpc.CallOption) (*wrapperspb.DoubleValue, error)
}

type variantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVariantServiceClient(cc grpc.ClientConnInterface) VariantServiceClient {
	return &variantServiceClient{cc}
}

func (c *variantServiceClient) CreateVariant(ctx context.Context, in *CreateVariantRequest, opts ...grpc.CallOption) (*CreateVariantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVariantResponse)
	err := c.cc.Invoke(ctx, VariantService_CreateVariant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variantServiceClient) ReserveStock(ctx context.Context, in *ReserveStockRequest, opts ...grpc.CallOption) (*ReserveStockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReserveStockResponse)
	err := c.cc.Invoke(ctx, VariantService_ReserveStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variantServiceClient) ReleaseStock(ctx context.Context, in *ReleaseStockRequest, opts ...grpc.CallOption) (*wrapperspb.DoubleValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.DoubleValue)
	err := c.cc.Invoke(ctx, VariantService_ReleaseStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VariantServiceServer is the server API for VariantService service.
// All implementations must embed UnimplementedVariantServiceServer
// for forward compatibility.
type VariantServiceServer interface {
	CreateVariant(context.Context, *CreateVariantRequest) (*CreateVariantResponse, error)
	ReserveStock(context.Context, *ReserveStockRequest) (*ReserveStockResponse, error)
	ReleaseStock(context.Context, *ReleaseStockRequest) (*wrapperspb.DoubleValue, error)
	mustEmbedUnimplementedVariantServiceServer()
}

// UnimplementedVariantServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVariantServiceServer struct{}

func (UnimplementedVariantServiceServer) CreateVariant(context.Context, *CreateVariantRequest) (*CreateVariantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVariant not implemented")
}
func (UnimplementedVariantServiceServer) ReserveStock(context.Context, *ReserveStockRequest) (*ReserveStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveStock not implemented")
}
func (UnimplementedVariantServiceServer) ReleaseStock(context.Context, *ReleaseStockRequest) (*wrapperspb.DoubleValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseStock not implemented")
}
func (UnimplementedVariantServiceServer) mustEmbedUnimplementedVariantServiceServer() {}
func (UnimplementedVariantServiceServer) testEmbeddedByValue()                        {}

// UnsafeVariantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VariantServiceServer will
// result in compilation errors.
type UnsafeVariantServiceServer interface {
	mustEmbedUnimplementedVariantServiceServer()
}

func RegisterVariantServiceServer(s grpc.ServiceRegistrar, srv VariantServiceServer) {
	// If the following call pancis, it indicates UnimplementedVariantServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VariantService_ServiceDesc, srv)
}

func _VariantService_CreateVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVariantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariantServiceServer).CreateVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VariantService_CreateVariant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariantServiceServer).CreateVariant(ctx, req.(*CreateVariantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VariantService_ReserveStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariantServiceServer).ReserveStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VariantService_ReserveStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariantServiceServer).ReserveStock(ctx, req.(*ReserveStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VariantService_ReleaseStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariantServiceServer).ReleaseStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VariantService_ReleaseStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariantServiceServer).ReleaseStock(ctx, req.(*ReleaseStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VariantService_ServiceDesc is the grpc.ServiceDesc for VariantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VariantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.ecommerce.springboot.product.v1.VariantService",
	HandlerType: (*VariantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVariant",
			Handler:    _VariantService_CreateVariant_Handler,
		},
		{
			MethodName: "ReserveStock",
			Handler:    _VariantService_ReserveStock_Handler,
		},
		{
			MethodName: "ReleaseStock",
			Handler:    _VariantService_ReleaseStock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Product.proto",
}
