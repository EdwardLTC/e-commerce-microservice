/**
* This file is auto-generated by nestjs-proto-gen-ts
*/

import { Observable } from 'rxjs';
import { Metadata } from '@grpc/grpc-js';

export namespace com {
    export namespace ecommerce {
        export namespace golang {
            export namespace order {
                export interface OrderService {
                    // Order Management
                    createOrder(
                        data: CreateOrderRequest,
                        metadata?: Metadata,
                        ...rest: any[]
                    ): Observable<CreateOrderResponse>;
                    getOrder(
                        data: GetOrderRequest,
                        metadata?: Metadata,
                        ...rest: any[]
                    ): Observable<Order>;
                    updateOrderStatus(
                        data: UpdateOrderStatusRequest,
                        metadata?: Metadata,
                        ...rest: any[]
                    ): Observable<Order>;
                    listOrders(
                        data: ListOrdersRequest,
                        metadata?: Metadata,
                        ...rest: any[]
                    ): Observable<ListOrdersResponse>;
                    // Payment Integration
                    initiatePayment(
                        data: PaymentIntentRequest,
                        metadata?: Metadata,
                        ...rest: any[]
                    ): Observable<PaymentIntentResponse>;
                    handlePaymentWebhook(
                        data: PaymentWebhookRequest,
                        metadata?: Metadata,
                        ...rest: any[]
                    ): Observable<google.protobuf.Empty>;
                    // Refunds
                    createRefund(
                        data: CreateRefundRequest,
                        metadata?: Metadata,
                        ...rest: any[]
                    ): Observable<Refund>;
                    processRefund(
                        data: ProcessRefundRequest,
                        metadata?: Metadata,
                        ...rest: any[]
                    ): Observable<Refund>;
                }
                export interface Order {
                    // UUID
                    id?: string;
                    // UUID
                    customerId?: string;
                    status?: order.OrderStatus;
                    subtotal?: number;
                    tax?: number;
                    shippingCost?: number;
                    total?: number;
                    shippingAddress?: string;
                    billingAddress?: string;
                    // UUID
                    paymentIntentId?: string;
                    createdAt?: google.protobuf.Timestamp;
                    updatedAt?: google.protobuf.Timestamp;
                    items?: order.OrderItem[];
                    refunds?: order.Refund[];
                }
                export interface OrderItem {
                    // UUID
                    id?: string;
                    // UUID
                    productId?: string;
                    // UUID
                    variantId?: string;
                    productName?: string;
                    variantDescription?: string;
                    unitPrice?: number;
                    salePrice?: number;
                    quantity?: number;
                    totalPrice?: number;
                    imageUrl?: string;
                    createdAt?: google.protobuf.Timestamp;
                    updatedAt?: google.protobuf.Timestamp;
                }
                export interface Refund {
                    // UUID
                    id?: string;
                    status?: order.RefundStatus;
                    amount?: number;
                    reason?: string;
                    // UUID
                    paymentRefundId?: string;
                    // UUIDs
                    orderItemIds?: string[];
                    createdAt?: google.protobuf.Timestamp;
                    updatedAt?: google.protobuf.Timestamp;
                }
                export interface CreateOrderResponse {
                    id?: string;
                    status?: order.OrderStatus;
                    paymentUrl?: string;
                }
                export enum OrderStatus {
                    ORDER_STATUS_DRAFT_UNSPECIFIED = 0,
                    ORDER_STATUS_PENDING_PAYMENT = 1,
                    ORDER_STATUS_PAYMENT_RECEIVED = 2,
                    ORDER_STATUS_PROCESSING = 3,
                    ORDER_STATUS_SHIPPED = 4,
                    ORDER_STATUS_DELIVERED = 5,
                    ORDER_STATUS_CANCELLED = 6,
                    ORDER_STATUS_ON_HOLD = 7,
                    ORDER_STATUS_REFUNDED = 8,
                }
                export enum RefundStatus {
                    REFUND_STATUS_REQUESTED_UNSPECIFIED = 0,
                    REFUND_STATUS_APPROVED = 1,
                    REFUND_STATUS_REJECTED = 2,
                    REFUND_STATUS_PROCESSED = 3,
                    REFUND_STATUS_FAILED = 4,
                }
                export enum PaymentMethod {
                    PAYMENT_METHOD_UNSPECIFIED = 0,
                    PAYMENT_METHOD_CREDIT_CARD = 1,
                    PAYMENT_METHOD_PAYPAL = 2,
                    PAYMENT_METHOD_BANK_TRANSFER = 3,
                    PAYMENT_METHOD_CRYPTO = 4,
                    PAYMENT_METHOD_CASH = 5,
                }
                // Order Management
                export interface CreateOrderRequest {
                    // UUID
                    customerId?: string;
                    items?: order.OrderItemRequest[];
                    shippingAddress?: string;
                    billingAddress?: string;
                }
                export interface OrderItemRequest {
                    // UUID
                    variantId?: string;
                    quantity?: number;
                }
                export interface GetOrderRequest {
                    // UUID
                    id?: string;
                }
                export interface UpdateOrderStatusRequest {
                    // UUID
                    id?: string;
                    status?: order.OrderStatus;
                }
                export interface ListOrdersRequest {
                    page?: number;
                    pageSize?: number;
                    // Optional filter
                    customerId?: string;
                    // Optional filter
                    status?: order.OrderStatus;
                    createdAfter?: google.protobuf.Timestamp;
                }
                export interface ListOrdersResponse {
                    orders?: order.Order[];
                    totalCount?: number;
                    currentPage?: number;
                    totalPages?: number;
                }
                // Payment Integration
                export interface PaymentIntentRequest {
                    // UUID
                    orderId?: string;
                    amount?: number;
                    // ISO 4217
                    currency?: string;
                    method?: order.PaymentMethod;
                    customerEmail?: string;
                    metadata?: { [key: string]: string };
                }
                export interface PaymentIntentResponse {
                    // UUID
                    paymentIntentId?: string;
                    // For Stripe-like integrations
                    clientSecret?: string;
                    redirectUrl?: string;
                }
                export interface PaymentWebhookRequest {
                    eventId?: string;
                    eventType?: string;
                    // UUID
                    paymentIntentId?: string;
                    amount?: number;
                    currency?: string;
                    success?: boolean;
                    createdAt?: google.protobuf.Timestamp;
                    metadata?: { [key: string]: string };
                    // For verification
                    signature?: string;
                }
                // Refunds
                export interface CreateRefundRequest {
                    // UUID
                    orderId?: string;
                    // UUIDs
                    orderItemIds?: string[];
                    reason?: string;
                    amount?: number;
                }
                export interface ProcessRefundRequest {
                    // UUID
                    refundId?: string;
                    // UUID from payment service
                    paymentRefundId?: string;
                }
            }
        }
    }
}
export namespace google {
    export namespace protobuf {
        export interface Timestamp {
            seconds?: number;
            nanos?: number;
        }
        // tslint:disable-next-line:no-empty-interface
        export interface Empty {
        }
    }
}

