// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: Payment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleUnaryCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { BoolValue, DoubleValue, StringValue } from "./google/protobuf/wrappers";

export const protobufPackage = "com.ecommerce.golang.payment";

/** ========== Data Structures ========== */
export interface CreateIntentRequest {
  orderId?:
    | string
    | undefined;
  /** UUID of the user making the payment */
  userId?:
    | string
    | undefined;
  /** e.g., "credit_card", "paypal" */
  paymentMethod?:
    | string
    | undefined;
  /** Amount in the smallest currency unit (e.g., cents) */
  amount?:
    | number
    | undefined;
  /** e.g., "USD", "EUR" */
  currency?:
    | string
    | undefined;
  /** Optional description of the payment */
  description?: string | undefined;
}

export interface CreateIntentResponse {
  intentId: string;
  /** URL to redirect the user for payment */
  paymentUrl: string;
}

export interface CancelIntentRequest {
  intentId?: string | undefined;
}

export const COM_ECOMMERCE_GOLANG_PAYMENT_PACKAGE_NAME = "com.ecommerce.golang.payment";

function createBaseCreateIntentRequest(): CreateIntentRequest {
  return {};
}

export const CreateIntentRequest: MessageFns<CreateIntentRequest> = {
  encode(message: CreateIntentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderId !== undefined) {
      StringValue.encode({ value: message.orderId! }, writer.uint32(10).fork()).join();
    }
    if (message.userId !== undefined) {
      StringValue.encode({ value: message.userId! }, writer.uint32(18).fork()).join();
    }
    if (message.paymentMethod !== undefined) {
      StringValue.encode({ value: message.paymentMethod! }, writer.uint32(26).fork()).join();
    }
    if (message.amount !== undefined) {
      DoubleValue.encode({ value: message.amount! }, writer.uint32(34).fork()).join();
    }
    if (message.currency !== undefined) {
      StringValue.encode({ value: message.currency! }, writer.uint32(42).fork()).join();
    }
    if (message.description !== undefined) {
      StringValue.encode({ value: message.description! }, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateIntentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateIntentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderId = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.paymentMethod = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.amount = DoubleValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.currency = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.description = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateIntentResponse(): CreateIntentResponse {
  return { intentId: "", paymentUrl: "" };
}

export const CreateIntentResponse: MessageFns<CreateIntentResponse> = {
  encode(message: CreateIntentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.intentId !== "") {
      writer.uint32(10).string(message.intentId);
    }
    if (message.paymentUrl !== "") {
      writer.uint32(18).string(message.paymentUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateIntentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateIntentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.intentId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.paymentUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCancelIntentRequest(): CancelIntentRequest {
  return {};
}

export const CancelIntentRequest: MessageFns<CancelIntentRequest> = {
  encode(message: CancelIntentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.intentId !== undefined) {
      StringValue.encode({ value: message.intentId! }, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelIntentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelIntentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.intentId = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface PaymentServiceClient {
  createIntent(request: CreateIntentRequest): Observable<CreateIntentResponse>;

  cancelIntent(request: CancelIntentRequest): Observable<BoolValue>;
}

export interface PaymentServiceController {
  createIntent(
    request: CreateIntentRequest,
  ): Promise<CreateIntentResponse> | Observable<CreateIntentResponse> | CreateIntentResponse;

  cancelIntent(request: CancelIntentRequest): Promise<BoolValue> | Observable<BoolValue> | BoolValue;
}

export function PaymentServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createIntent", "cancelIntent"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PaymentService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PaymentService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PAYMENT_SERVICE_NAME = "PaymentService";

export type PaymentServiceService = typeof PaymentServiceService;
export const PaymentServiceService = {
  createIntent: {
    path: "/com.ecommerce.golang.payment.PaymentService/CreateIntent",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateIntentRequest): Buffer => Buffer.from(CreateIntentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateIntentRequest => CreateIntentRequest.decode(value),
    responseSerialize: (value: CreateIntentResponse): Buffer =>
      Buffer.from(CreateIntentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CreateIntentResponse => CreateIntentResponse.decode(value),
  },
  cancelIntent: {
    path: "/com.ecommerce.golang.payment.PaymentService/CancelIntent",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CancelIntentRequest): Buffer => Buffer.from(CancelIntentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CancelIntentRequest => CancelIntentRequest.decode(value),
    responseSerialize: (value: boolean | undefined): Buffer =>
      Buffer.from(BoolValue.encode({ value: value ?? false }).finish()),
    responseDeserialize: (value: Buffer): boolean | undefined => BoolValue.decode(value).value,
  },
} as const;

export interface PaymentServiceServer extends UntypedServiceImplementation {
  createIntent: handleUnaryCall<CreateIntentRequest, CreateIntentResponse>;
  cancelIntent: handleUnaryCall<CancelIntentRequest, boolean | undefined>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
