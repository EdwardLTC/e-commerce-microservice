// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: User.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import type { handleUnaryCall, UntypedServiceImplementation } from '@grpc/grpc-js';
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { StringValue } from './google/protobuf/wrappers';

export const protobufPackage = 'com.ecommerce.aspnet.user';

export interface ChangePasswordRequest {
  id?: string | undefined;
  oldPassword?: string | undefined;
  newPassword?: string | undefined;
}

export interface GetUserByIdRequest {
  id?: string | undefined;
}

export interface GetUserByEmailAndPasswordRequest {
  email?: string | undefined;
  password?: string | undefined;
}

export interface CreateUserRequest {
  name?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
}

export interface UserProfile {
  id: string;
  name: string;
  email: string;
}

export const COM_ECOMMERCE_ASPNET_USER_PACKAGE_NAME = 'com.ecommerce.aspnet.user';

function createBaseChangePasswordRequest(): ChangePasswordRequest {
  return {};
}

export const ChangePasswordRequest: MessageFns<ChangePasswordRequest> = {
  encode(message: ChangePasswordRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      StringValue.encode({ value: message.id! }, writer.uint32(10).fork()).join();
    }
    if (message.oldPassword !== undefined) {
      StringValue.encode({ value: message.oldPassword! }, writer.uint32(18).fork()).join();
    }
    if (message.newPassword !== undefined) {
      StringValue.encode({ value: message.newPassword! }, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangePasswordRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangePasswordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.oldPassword = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.newPassword = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetUserByIdRequest(): GetUserByIdRequest {
  return {};
}

export const GetUserByIdRequest: MessageFns<GetUserByIdRequest> = {
  encode(message: GetUserByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      StringValue.encode({ value: message.id! }, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetUserByEmailAndPasswordRequest(): GetUserByEmailAndPasswordRequest {
  return {};
}

export const GetUserByEmailAndPasswordRequest: MessageFns<GetUserByEmailAndPasswordRequest> = {
  encode(message: GetUserByEmailAndPasswordRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== undefined) {
      StringValue.encode({ value: message.email! }, writer.uint32(10).fork()).join();
    }
    if (message.password !== undefined) {
      StringValue.encode({ value: message.password! }, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserByEmailAndPasswordRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserByEmailAndPasswordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateUserRequest(): CreateUserRequest {
  return {};
}

export const CreateUserRequest: MessageFns<CreateUserRequest> = {
  encode(message: CreateUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      StringValue.encode({ value: message.name! }, writer.uint32(10).fork()).join();
    }
    if (message.email !== undefined) {
      StringValue.encode({ value: message.email! }, writer.uint32(18).fork()).join();
    }
    if (message.password !== undefined) {
      StringValue.encode({ value: message.password! }, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.password = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUserProfile(): UserProfile {
  return { id: '', name: '', email: '' };
}

export const UserProfile: MessageFns<UserProfile> = {
  encode(message: UserProfile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== '') {
      writer.uint32(18).string(message.name);
    }
    if (message.email !== '') {
      writer.uint32(26).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserProfile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface UserServiceClient {
  getUserById(request: GetUserByIdRequest): Observable<UserProfile>;

  createUser(request: CreateUserRequest): Observable<UserProfile>;

  getUserByEmailAndPassword(request: GetUserByEmailAndPasswordRequest): Observable<UserProfile>;

  changePassword(request: ChangePasswordRequest): Observable<UserProfile>;
}

export interface UserServiceController {
  getUserById(request: GetUserByIdRequest): Promise<UserProfile> | Observable<UserProfile> | UserProfile;

  createUser(request: CreateUserRequest): Promise<UserProfile> | Observable<UserProfile> | UserProfile;

  getUserByEmailAndPassword(request: GetUserByEmailAndPasswordRequest): Promise<UserProfile> | Observable<UserProfile> | UserProfile;

  changePassword(request: ChangePasswordRequest): Promise<UserProfile> | Observable<UserProfile> | UserProfile;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['getUserById', 'createUser', 'getUserByEmailAndPassword', 'changePassword'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod('UserService', method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod('UserService', method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = 'UserService';

export type UserServiceService = typeof UserServiceService;
export const UserServiceService = {
  getUserById: {
    path: '/com.ecommerce.aspnet.user.UserService/GetUserById',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserByIdRequest): Buffer => Buffer.from(GetUserByIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetUserByIdRequest => GetUserByIdRequest.decode(value),
    responseSerialize: (value: UserProfile): Buffer => Buffer.from(UserProfile.encode(value).finish()),
    responseDeserialize: (value: Buffer): UserProfile => UserProfile.decode(value),
  },
  createUser: {
    path: '/com.ecommerce.aspnet.user.UserService/CreateUser',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateUserRequest): Buffer => Buffer.from(CreateUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateUserRequest => CreateUserRequest.decode(value),
    responseSerialize: (value: UserProfile): Buffer => Buffer.from(UserProfile.encode(value).finish()),
    responseDeserialize: (value: Buffer): UserProfile => UserProfile.decode(value),
  },
  getUserByEmailAndPassword: {
    path: '/com.ecommerce.aspnet.user.UserService/GetUserByEmailAndPassword',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserByEmailAndPasswordRequest): Buffer => Buffer.from(GetUserByEmailAndPasswordRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetUserByEmailAndPasswordRequest => GetUserByEmailAndPasswordRequest.decode(value),
    responseSerialize: (value: UserProfile): Buffer => Buffer.from(UserProfile.encode(value).finish()),
    responseDeserialize: (value: Buffer): UserProfile => UserProfile.decode(value),
  },
  changePassword: {
    path: '/com.ecommerce.aspnet.user.UserService/ChangePassword',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ChangePasswordRequest): Buffer => Buffer.from(ChangePasswordRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ChangePasswordRequest => ChangePasswordRequest.decode(value),
    responseSerialize: (value: UserProfile): Buffer => Buffer.from(UserProfile.encode(value).finish()),
    responseDeserialize: (value: Buffer): UserProfile => UserProfile.decode(value),
  },
} as const;

export interface UserServiceServer extends UntypedServiceImplementation {
  getUserById: handleUnaryCall<GetUserByIdRequest, UserProfile>;
  createUser: handleUnaryCall<CreateUserRequest, UserProfile>;
  getUserByEmailAndPassword: handleUnaryCall<GetUserByEmailAndPasswordRequest, UserProfile>;
  changePassword: handleUnaryCall<ChangePasswordRequest, UserProfile>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
